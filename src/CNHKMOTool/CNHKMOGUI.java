/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package CNHKMOTool;

import java.awt.Component;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.*;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Paragraph;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.hwpf.usermodel.Table;
//import org.apache.poi.hwpf.usermodel.TableCell;
//import org.apache.poi.hwpf.usermodel.TableRow;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
//import org.apache.poi.xwpf.usermodel.XWPFTableCell;
//import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.apache.xmlbeans.impl.piccolo.io.FileFormatException;

import taobe.tec.jcc.JChineseConvertor;
import TravelData.*;


public class CNHKMOGUI extends javax.swing.JFrame {

    /**
     * Creates new form CNHKMOGUI
     */
    public CNHKMOGUI() {
        initComponents();
        initCustomComponents();
        createLink("D:/CNHKMO/db/CNHKMO");
        Runtime.getRuntime().addShutdownHook(new ShutdownThread(this.conn));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        submit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        clientDataPath = new javax.swing.JFormattedTextField();
        selectClientDataBtn = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tourName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        selectFolderBtn = new javax.swing.JButton();
        folderPath = new javax.swing.JTextField();
        attachFilePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attachDetailList = new javax.swing.JList();
        selectAttachBtn = new javax.swing.JButton();
        removeAttachBtn = new javax.swing.JButton();
        headShotPath = new javax.swing.JTextField();
        selectHeadShot = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        attachBelongList = new javax.swing.JList();
        removeAllAttachBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        setToHeadShot = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        appMsg = new javax.swing.JTextArea();

        fileChooser.setDialogTitle("請選擇檔案");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CNHKMOTool");

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        submit.setText("確定");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel1.setText("申請資料");

        clientDataPath.setEnabled(false);

        selectClientDataBtn.setText("瀏覽");
        selectClientDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectClientDataBtnActionPerformed(evt);
            }
        });

        exit.setText("離開");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel4.setText("行程名稱");

        jLabel3.setText("資料夾");

        selectFolderBtn.setText("瀏覽");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });

        attachFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("附件"));

        attachListModel = new DefaultListModel();
        attachDetailList.setModel(attachListModel);
        attachDetailList.setToolTipText("");
        attachDetailList.setCellRenderer(new MyCellRenderer());
        jScrollPane3.setViewportView(attachDetailList);

        selectAttachBtn.setText("瀏覽");
        selectAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAttachBtnActionPerformed(evt);
            }
        });

        removeAttachBtn.setText("移除");
        removeAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttachBtnActionPerformed(evt);
            }
        });

        headShotPath.setEnabled(false);

        selectHeadShot.setText("瀏覽");
        selectHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectHeadShotActionPerformed(evt);
            }
        });

        attachBelongModel = new DefaultListModel();
        attachBelongList.setModel(attachBelongModel);
        attachBelongList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        attachBelongList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                attachBelongListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(attachBelongList);

        removeAllAttachBtn.setText("全部移除");
        removeAllAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllAttachBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("大頭照");

        setToHeadShot.setText("設為大頭照");
        setToHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToHeadShotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attachFilePanelLayout = new javax.swing.GroupLayout(attachFilePanel);
        attachFilePanel.setLayout(attachFilePanelLayout);
        attachFilePanelLayout.setHorizontalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headShotPath)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectHeadShot, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(selectAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(removeAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(removeAllAttachBtn)
                    .addComponent(setToHeadShot))
                .addContainerGap())
        );
        attachFilePanelLayout.setVerticalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headShotPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectHeadShot)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(attachFilePanelLayout.createSequentialGroup()
                                .addComponent(selectAttachBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setToHeadShot)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeAttachBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeAllAttachBtn))))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(folderPath)
                                    .addComponent(clientDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(selectClientDataBtn))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(selectFolderBtn))))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(attachFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFolderBtn)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectClientDataBtn)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(attachFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        appMsg.setColumns(20);
        appMsg.setRows(5);
        appMsg.setText("===========================================================\n一、操作方法\n  1.選擇申請資料(文件格式僅接受Microsoft Word2003以上版本。)\n  2.選擇申請人大頭照\n  3.選擇其他附件\n  4.輸入行程名稱\n  5.按下確定\n  6.待完成之後關閉此工具\n  7.至入台申請平台-離線版查詢資料應可找到此筆申請資料\n二、注意事項：\n  1.在使用此工具之前，請先確定是否有先開啟入台申請平台-離線版，\n    如有開啟，請將之關閉，才能夠使用。\n  2.在開啟此工具的情況下，無法使用入台申請平台-離線版\n  3.以下資料無法從申請資料獲得，或可能無法辨識，因此必須手動填寫:\n    1) 申請資格\n    2) 出生地\n    3) 職業類別\n    4) 居住城市\n===========================================================");
        jScrollPane1.setViewportView(appMsg);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        
        if(clientData == null){ showMessage("請選擇申請資料", "warring"); return; }
        submit.setEnabled(false);
        
        if(clientData.getName().endsWith(".doc")){
            word2003Resolve(clientData);
        }else if(clientData.getName().endsWith(".docx")){
            word2007Resolve(clientData);
        }else{ 
            showMessage("請選擇正確的檔案格式 - Microsotf Word", "warring");
            clientData = null;
            return;
        }

        travelgroup.setApplyDate();
        travelgroup.setNiaApplyDate();
        travelgroup.setTourName(tourName.getText());
        travelgroup.setGroupCount((short)travellerList.size());
        travelgroup.setPermitApplyCount(Integer.toString(travellerList.size()));
        
        if(insertData()){
            showMessage("儲存成功！");
            initCustomComponents();
        }
        
        /*
        *  確認有無資料是無法解析的，列出來。
        *  setCompletion
        */
        
        System.out.println("申請日期：" + travelgroup.getApplyDate());
        System.out.println("申請日期(nia)：" + travelgroup.getNiaApplyDate());
        System.out.println("行程名稱：" + travelgroup.getTourName());
        System.out.println("旅客人數：" + travelgroup.getGroupCount());
        System.out.println("申請人數：" + travelgroup.getPermitApplyCount());
        System.out.println("入境地點：" + travelgroup.getEntryPort());
        System.out.println("出境地點：" + travelgroup.getExitPort());
        System.out.println("入境日期：" + travelgroup.getTourStartDate());
        System.out.println("出境日期：" + travelgroup.getTourEndDate());
        System.out.println("組團社代號：" + travelgroup.getCnTravelAgencyNo());
        System.out.println("組團社名稱：" + travelgroup.getCnTravelAgencyName());
        System.out.println("緊急聯絡人-姓名：" + travelgroup.getContactNameOfMainland());
        System.out.println("緊急聯絡人-關係：" + travelgroup.getContactTitleOfMainland());
        System.out.println("緊急聯絡人-手機：" + travelgroup.getContactMobileNoOfMainland());
        System.out.println("緊急聯絡人-性別：" + travelgroup.getContactGenderOfMainland());
        System.out.println("緊急聯絡人-電話：" + travelgroup.getContactTelNoOfMainland());
        System.out.println("緊急聯絡人-地址：" + travelgroup.getContactAddressOfMainland());
        for(Traveller traveller : travellerList){
            System.out.println("--------------------------------------");
            System.out.println("seqno：" + traveller.getSeqNo());
            System.out.println("中文姓名：" + traveller.getChineseName());
            System.out.println("性別:" + traveller.getGender());
            System.out.println("出生年月日：" + traveller.getBirthDate());
            System.out.println("拼音姓名：" + traveller.getEnglishName());
            System.out.println("通行證號碼：" + traveller.getPassportNo());
            System.out.println("通行證有效期至：" + traveller.getPassportExpiryDate());
            System.out.println("身份證號：" + traveller.getPersonId());
            System.out.println("教育程度：" + traveller.getEducation());
            System.out.println("現職：" + traveller.getOccupationDesc());
            System.out.println("居住城市：" + traveller.getLivingCity());
            System.out.println("住址：" + traveller.getAddress());
            System.out.println("為臺灣人民之配偶：" + traveller.getPartnerOfTaiwan());
            System.out.println("隨行親友姓名：" + traveller.getRelative());
            System.out.println("隨行親友稱謂：" + traveller.getRelativeTitle());
        }
        System.out.println("--------------------------------------\n附件:");
        for(ApplyAttach aa : applyAttachList){
            System.out.println("@: " + aa.getBelongTo());
            List<Attach> la = aa.getAttachList();
            for(Attach a : la){
                System.out.println(a.getFile().getName());
            }
        }
        
    }//GEN-LAST:event_submitActionPerformed

    private void selectClientDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectClientDataBtnActionPerformed
        FileFilter wordFilter = new ExtensionFileFilter("Microsoft Word file(2003以上版本)", new String[] { "DOC", "DOCX" });
        fileChooser.setFileFilter(wordFilter);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            clientData = fileChooser.getSelectedFile();
            clientDataPath.setText(clientData.getAbsolutePath());
            tourName.setText(clientData.getParentFile().getName());
        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_selectClientDataBtnActionPerformed

    private void selectHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectHeadShotActionPerformed
        FileFilter picFilter = new ExtensionFileFilter("圖片(jpg, jpeg)", new String[] { "JPG", "JPEG" });
        fileChooser.setFileFilter(picFilter);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            headShot = fileChooser.getSelectedFile();
            headShotPath.setText(headShot.getAbsolutePath());
        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_selectHeadShotActionPerformed

    private void selectAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAttachBtnActionPerformed
        FileFilter picFilter = new ExtensionFileFilter("圖片(jpg, jpeg)", new String[] { "JPG", "JPEG" });
        fileChooser.setFileFilter(picFilter);
        fileChooser.setMultiSelectionEnabled(true);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            for (File file : files) { attachListModel.addElement(file); }
        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_selectAttachBtnActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        int q = JOptionPane.showConfirmDialog(null, "真的要關閉嗎?", "問題", JOptionPane.YES_NO_OPTION);
        if(q == 0){ System.exit(0); }
    }//GEN-LAST:event_exitActionPerformed

    private void removeAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttachBtnActionPerformed

        int[] idxs = attachDetailList.getSelectedIndices();
        int abidx = attachBelongList.getSelectedIndex();
        List<Attach> della = new ArrayList<Attach>();

        for(int i : idxs){
            della.add(applyAttachList.get(abidx).getAttachList().get(i));
        }
        
        List<Attach> la = applyAttachList.get(abidx).getAttachList();
        la.removeAll(della);
        applyAttachList.get(abidx).setAttachList(la);
        setAttachDetail(abidx);
        /*
        int idx = attachDetailList.getSelectedIndex();
        
        if(idx < 0){ return; }
        
        int abidx = attachBelongList.getSelectedIndex();
        List<Attach> la = applyAttachList.get(abidx).getAttachList();
        la.remove(idx);
        applyAttachList.get(abidx).setAttachList(la);
        setAttachDetail(abidx);
        */
//        while(this.attachDetailList.getSelectedIndices().length > 0){
//            int selectFirst = attachDetailList.getSelectedIndices()[0];
//            attachListModel.removeElementAt(selectFirst);
//        }
        /*
        *   以下這個方法不可行，因為在刪除一個選擇的項目的時候，
        *   JList的index會全部刷新，導致下一個要刪除的index是錯誤的目標
        *
        if(this.plusItemList.getSelectedIndices().length > 0) {
            int[] selectedIndices = plusItemList.getSelectedIndices();
            for(int idx : selectedIndices){
                dlm.removeElementAt(idx);
            }
        }
        */
    }//GEN-LAST:event_removeAttachBtnActionPerformed

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        initCustomComponents();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File folder = fileChooser.getSelectedFile();
            folderPath.setText(folder.getAbsolutePath());
            tourName.setText(folder.getName());
            getFolderFile(folder);
            setAttachPanel();
            if(clientData == null){ showMessage("找不到申請文件，請手動選擇。", "warring"); }
            if(applyAttachList.size() ==0 ){ showMessage("找不到可以附加的圖片，請手動選擇。", "warring"); }

        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void attachBelongListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_attachBelongListValueChanged
        setAttachDetail(attachBelongList.getSelectedIndex());
    }//GEN-LAST:event_attachBelongListValueChanged

    private void removeAllAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllAttachBtnActionPerformed

        int abidx = attachBelongList.getSelectedIndex();
        applyAttachList.get(abidx).setAttachList(new ArrayList<Attach>());
        setAttachDetail(abidx);
    }//GEN-LAST:event_removeAllAttachBtnActionPerformed

    private void setToHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToHeadShotActionPerformed

        int[] idxs = attachDetailList.getSelectedIndices();
        if(idxs.length != 1){ return; }
        int abidx = attachBelongList.getSelectedIndex();
        List<Attach> la = applyAttachList.get(abidx).getAttachList();
        for(int i = 0; i < la.size(); i++){
            if(i == idxs[0]){
                la.get(i).setType("1");
            }else{
                la.get(i).setType("2");
            }
        }
        applyAttachList.get(abidx).setAttachList(la);
        setAttachDetail(abidx);
    }//GEN-LAST:event_setToHeadShotActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*  改變UI的style，Windows風格
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                */
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CNHKMOGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea appMsg;
    private javax.swing.JList attachBelongList;
    private DefaultListModel attachBelongModel;
    private javax.swing.JList attachDetailList;
    private DefaultListModel attachListModel;
    private javax.swing.JPanel attachFilePanel;
    private javax.swing.JFormattedTextField clientDataPath;
    private File clientData;
    private javax.swing.JButton exit;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTextField folderPath;
    private javax.swing.JTextField headShotPath;
    private File headShot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton removeAllAttachBtn;
    private javax.swing.JButton removeAttachBtn;
    private javax.swing.JButton selectAttachBtn;
    private javax.swing.JButton selectClientDataBtn;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JButton selectHeadShot;
    private javax.swing.JButton setToHeadShot;
    private javax.swing.JButton submit;
    private javax.swing.JTextField tourName;
    // End of variables declaration//GEN-END:variables
    private static Connection conn;
    private TravelGroup travelgroup;
    private List<Traveller> travellerList;
    private List<ApplyAttach> applyAttachList;
    
    private void initCustomComponents() {
        tourName.setText("");
        folderPath.setText("");
        clientData = null;
        clientDataPath.setText("");
        headShot = null;
        headShotPath.setText("");
        attachListModel.removeAllElements();
        attachBelongModel.removeAllElements();
        applyAttachList = new ArrayList<ApplyAttach>();
        travelgroup = new TravelGroup();
        travellerList = new ArrayList<Traveller>();
        submit.setEnabled(true);
    }
    
    private void createLink(String dbPath)  {
        try{
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();//加载驱动
            this.conn = DriverManager.getConnection("jdbc:derby:"+dbPath);//连接数据库
            System.out.println("資料庫連結成功！");
        }catch(SQLException e){
            System.out.println("資料庫連結失敗！");
            appMsg.append(e.getMessage());
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。", "err");
        }catch(Exception e){
            System.out.println("資料庫連結失敗！");
            appMsg.append("資料庫連結失敗！\n");
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。", "err");
            e.printStackTrace();
        }
    }
    
    private void getFolderFile(File folder){
        File[] fileList = folder.listFiles();
        List<Attach> la = new ArrayList<Attach>();
        Attach a = null;
        for(File f : fileList){
            String fn = f.getName().toLowerCase();
            if(fn.endsWith(".doc") || fn.endsWith(".docx")){
                clientData = f;
                clientDataPath.setText(f.getAbsolutePath());
            }else if(fn.endsWith(".jpg") || fn.endsWith(".jpeg") || fn.endsWith(".png")){
                a = new Attach();
                a.setFile(f);
                la.add(a);
            }else if(f.getName().indexOf("主") >= 0){
                getFolderFile(f);
            }else if(f.getName().indexOf("隨") >= 0){
                getFolderFile(f);
            }
        }
        if(la.size() > 0){
            ApplyAttach aa = new ApplyAttach();
            aa.setAttachList(la);
            aa.setBelongTo(folder.getName());
            applyAttachList.add(aa);
        }
    }
    
    private void setAttachPanel(){
        attachBelongModel.removeAllElements();
        for(ApplyAttach aa : applyAttachList){
            attachBelongModel.addElement(aa.getBelongTo());
        }
        
//        attachBelongList.setModel(attachBelongModel);
        attachBelongList.setSelectedIndex(0);
    }
    
    private void setAttachDetail(int idx){
        attachListModel.removeAllElements();
        List<Attach> la = applyAttachList.get(idx).getAttachList();
        for(Attach a : la){
            attachListModel.addElement(a.getFile());
//            attachListModel.addElement(a);
        }
        
        setHeadShot();
    }
    
    private void setHeadShot(){
        headShotPath.setText("");
        int abidx = attachBelongList.getSelectedIndex();
        List<Attach> la = applyAttachList.get(abidx).getAttachList();
        for(Attach a : la){
            if(a.getType().equals("1")){
                headShotPath.setText(a.getFile().getName());
                break;
            }
        }
    }
    
    class ExtensionFileFilter extends FileFilter {
        String description;
        String extensions[];

        public ExtensionFileFilter(String description, String extension) {
            this(description, new String[] { extension });
        }

        public ExtensionFileFilter(String description, String extensions[]) {
            if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
            this.extensions = (String[]) extensions.clone();
            toLower(this.extensions);
        }

        private void toLower(String array[]) {
            for (int i = 0, n = array.length; i < n; i++) {
                array[i] = array[i].toLowerCase();
            }
        }

        public String getDescription() {
            return description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            } else {
                String path = file.getAbsolutePath().toLowerCase();
                for (int i = 0, n = extensions.length; i < n; i++) {
                    String extension = extensions[i];
                    if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    
    private static class MyCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof File) {
                File file = (File) value;
                setText(file.getName());
                setIcon(FileSystemView.getFileSystemView().getSystemIcon(file));
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }    
    
    private String calculateTourDate(String startDate, int num) throws ParseException{
        SimpleDateFormat formatter=new SimpleDateFormat("yyyyMMdd");
        Date sdt=formatter.parse(startDate);
        Calendar rightNow = Calendar.getInstance();
        rightNow.setTime(sdt);
        rightNow.add(Calendar.DAY_OF_YEAR,num);
        Date edt=rightNow.getTime();
        String endData = formatter.format(edt);
    return endData;
  }
    
    private String getNowTimeToSS(){
        Date d = new Date();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmssSS");
        String str=sdf.format(d);
        return str;
    }
    
    private String transToTC(String str){
        String result = null;
        try{
            result = new String(str.getBytes("UTF-8"), "UTF-8");
            JChineseConvertor convertor =  JChineseConvertor.getInstance();
            result = convertor.s2t(str);
        } catch (Exception e){e.printStackTrace();}
        return result;
    }
    
    private void word2003Resolve(File file){
        try{
            if(!file.getName().endsWith(".doc")) {
                throw new FileFormatException();
            } else {
                POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(file));
                HWPFDocument doc = new HWPFDocument(fs);
                Range range = doc.getRange();
                Table table = null;
                
                for (int i=0; i<range.numParagraphs(); i++) {
                    Paragraph par = range.getParagraph(i);
                    if(par.isInTable()){
                        table = range.getTable(par);
                        break;
                    }
                }
                
                if(table != null){
                    /*
                    *   印出所有Table資料，確認用。
                    *
                    for (int rowIdx=0; rowIdx<table.numRows(); rowIdx++) {
                        TableRow row = table.getRow(rowIdx);
                        System.out.println("row "+rowIdx);
                        for (int colIdx=0; colIdx<row.numCells(); colIdx++) {
                            TableCell cell = row.getCell(colIdx);
                            System.out.println("column: "+colIdx+", text: "+cell.getParagraph(0).text());
                        }
                    }
                    */
                    
                    String sDate = table.getRow(0).getCell(2).getParagraph(0).text();
                    String eDate = calculateTourDate(sDate, 14);
                    travelgroup.setTourStartDate(sDate);
                    travelgroup.setTourEndDate(eDate);
                    travelgroup.setContactNameOfMainland(transToTC(table.getRow(4).getCell(1).getParagraph(0).text()));
                    travelgroup.setContactTitleOfMainland(transToTC(table.getRow(4).getCell(3).getParagraph(0).text()));
                    travelgroup.setContactMobileNoOfMainland(table.getRow(5).getCell(1).getParagraph(0).text());
                    travelgroup.setContactGenderOfMainland(transToTC(table.getRow(5).getCell(3).getParagraph(0).text()));
                    travelgroup.setContactTelNoOfMainland(table.getRow(5).getCell(5).getParagraph(0).text());
                    travelgroup.setContactAddressOfMainland(transToTC(table.getRow(6).getCell(1).getParagraph(0).text()));
                    
                    try{
                        Traveller traveller = null;
                        for(int i = 0; true; i++){
                            traveller = new Traveller();
                            traveller.setSeqNo((short)i);
                            traveller.setChineseName(transToTC(table.getRow(11+7*i).getCell(1).getParagraph(0).text()));
                            traveller.setGender(transToTC(table.getRow(11+7*i).getCell(3).getParagraph(0).text()));
                            traveller.setBirthDate(table.getRow(11+7*i).getCell(5).getParagraph(0).text());
                            traveller.setEnglishName(table.getRow(12+7*i).getCell(1).getParagraph(0).text());
                            traveller.setPassportNo(table.getRow(12+7*i).getCell(3).getParagraph(0).text());
                            traveller.setPassportExpiryDate(table.getRow(12+7*i).getCell(5).getParagraph(0).text());
                            traveller.setPersonId(table.getRow(13+7*i).getCell(1).getParagraph(0).text());
                            traveller.setEducation(transToTC(table.getRow(14+7*i).getCell(1).getParagraph(0).text()));
                            traveller.setOccupationDesc(transToTC(table.getRow(14+7*i).getCell(3).getParagraph(0).text()));
                            traveller.setAddress(transToTC(table.getRow(15+7*i).getCell(3).getParagraph(0).text()));
                            traveller.setLivingCity(transToTC(table.getRow(15+7*i).getCell(3).getParagraph(0).text()));
                            
                            if(!traveller.isValidTraveller()){ break; }
                            if(i == 0){
                                travellerList.add(traveller);
                                continue;
                            }
                            traveller.setRelative(travellerList.get(0).getChineseName());
                            traveller.setRelativeTitle(transToTC(table.getRow(16+7*i).getCell(1).getParagraph(0).text()));
                            traveller.setPartnerOfTaiwan(transToTC(table.getRow(16+7*i).getCell(3).getParagraph(0).text()));
                            
                            travellerList.add(traveller);
                        }
                    }catch(IndexOutOfBoundsException e){}
                }else{ appMsg.append("無法解析檔案\n"); }
            }
        } catch(FileFormatException e) {
            appMsg.append("請選擇正確的檔案格式 - Microsotf Word\n");
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            appMsg.append("找不到檔案\n");
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
    
    private void word2007Resolve(File file){
        try{
            if(!file.getName().endsWith(".docx")) {
                throw new FileFormatException();
            } else {
                XWPFDocument doc = new XWPFDocument(new FileInputStream(file));
                List<XWPFTable> tableList = doc.getTables();
                if(tableList != null){
                    
                    /*
                    * 印出所有Table資料，確認用。
                    *
                    XWPFTable xwpfTable = tableList.get(0);
                    List<XWPFTableRow> row = xwpfTable.getRows();
                    int rowidx = 0, colidx = 0;
                    for (XWPFTableRow xwpfTableRow : row) {
                        System.out.println("row " + rowidx);
                        rowidx++; colidx = 0;
                        List<XWPFTableCell> cell = xwpfTableRow.getTableCells();
                        for (XWPFTableCell xwpfTableCell : cell) {
                            if(xwpfTableCell!=null){
                                System.out.println("column " + colidx + ", text: " + xwpfTableCell.getText());
                                colidx++;
                            }
                        }
                    }
                    */
                    
                    XWPFTable table = tableList.get(0);
                    String sDate = table.getRow(0).getCell(2).getText();
                    String eDate = calculateTourDate(sDate, 14);
                    travelgroup.setTourStartDate(sDate);
                    travelgroup.setTourEndDate(eDate);
                    travelgroup.setContactNameOfMainland(transToTC(table.getRow(4).getCell(1).getText()));
                    travelgroup.setContactTitleOfMainland(transToTC(table.getRow(4).getCell(3).getText()));
                    travelgroup.setContactMobileNoOfMainland(table.getRow(5).getCell(1).getText());
                    travelgroup.setContactGenderOfMainland(transToTC(table.getRow(5).getCell(3).getText()));
                    travelgroup.setContactTelNoOfMainland(table.getRow(5).getCell(5).getText());
                    travelgroup.setContactAddressOfMainland(transToTC(table.getRow(6).getCell(1).getText()));
                    
                    try{
                        Traveller traveller = null;
                        for(int i = 0; true; i++){
                            traveller = new Traveller();
                            traveller.setSeqNo((short)i);
                            traveller.setChineseName(transToTC(table.getRow(11+7*i).getCell(1).getText()));
                            traveller.setGender(transToTC(table.getRow(11+7*i).getCell(3).getText()));
                            traveller.setBirthDate(table.getRow(11+7*i).getCell(5).getText());
                            traveller.setEnglishName(table.getRow(12+7*i).getCell(1).getText());
                            traveller.setPassportNo(table.getRow(12+7*i).getCell(3).getText());
                            traveller.setPassportExpiryDate(table.getRow(12+7*i).getCell(5).getText());
                            traveller.setPersonId(table.getRow(13+7*i).getCell(1).getText());
                            traveller.setEducation(transToTC(table.getRow(14+7*i).getCell(1).getText()));
                            traveller.setOccupationDesc(transToTC(table.getRow(14+7*i).getCell(3).getText()));
                            traveller.setAddress(transToTC(table.getRow(15+7*i).getCell(3).getText()));
                            traveller.setLivingCity(transToTC(table.getRow(15+7*i).getCell(3).getText()));
                            
                            if(!traveller.isValidTraveller()){ break; }
                            if(i == 0){
                                travellerList.add(traveller);
                                continue;
                            }
                            traveller.setRelative(travellerList.get(0).getChineseName());
                            traveller.setRelativeTitle(transToTC(table.getRow(16+7*i).getCell(1).getText()));
                            traveller.setPartnerOfTaiwan(transToTC(table.getRow(16+7*i).getCell(3).getText()));
                            
                            travellerList.add(traveller);
                        }
                    }catch(IndexOutOfBoundsException e){}
                }else{ appMsg.append("無法解析檔案\n"); }
            }
        } catch(FileFormatException e) {
            appMsg.append("請選擇正確的檔案格式 - Microsotf Word\n");
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            appMsg.append("找不到檔案\n");
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
    
    private void showMessage(String msg){
        showMessage(msg, "info");
    }
    
    private void showMessage(String msg, String type){
        if(type.equals("info")){
            JOptionPane.showMessageDialog(null, msg, "訊息", JOptionPane.INFORMATION_MESSAGE);
        }else if(type.equals("warring")){
            JOptionPane.showMessageDialog(null, msg, "注意", JOptionPane.WARNING_MESSAGE);
        }else if(type.equals("err")){
            JOptionPane.showMessageDialog(null, msg, "錯誤", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }
    
    /* @modify */
    private boolean insertData(){
        String idBase = getNowTimeToSS();
        String travelGroupId = idBase + "tg";
        String travellerId = idBase + "tr";
        String travelTourId = idBase + "tt";
        String travelTourDetailId = idBase + "ttd";

        try{
            Statement st = conn.createStatement();
            String insertStr;
            
            travelgroup.setId(travelGroupId);
            insertStr= travelgroup.getInsertStr();
            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            int j = 1;
            for(Traveller traveller : travellerList){
                traveller.setId(travellerId + j);
                traveller.setTravelGroupId(travelGroupId);
                insertStr = traveller.getInsertStr();
                System.out.println(insertStr);
                st.executeUpdate(insertStr);
                
                insertStr = "insert into APPLYCASEATTACH(id, TRAVELLERID, version, fileName, attachType, attachFile, CreateDate) "
                        + "values(?, ?, 0, ?, ?, ?, current_timestamp)";
                System.out.println(insertStr);
                for(ApplyAttach aa : applyAttachList){
                    if(aa.getBelongTo().indexOf(traveller.getChineseName()) >=0 ){
                        List<Attach> la = aa.getAttachList();
                        for(int i = 0; i < la.size(); i++){
                            File file = la.get(i).getFile();
                            InputStream fin = new FileInputStream(file.getAbsolutePath());
                            PreparedStatement ps = conn.prepareStatement(insertStr);
                            ps.setString(1, traveller.getId() + "at" + i);
                            ps.setString(2, traveller.getId());
                            ps.setString(3, file.getName());
                            ps.setString(4, la.get(i).getType());
                            ps.setBinaryStream(5, fin);
                            ps.execute();
                            fin.close();
                        }
                    }
                }
                j++;
            }
            
            insertStr = String.format(
                    "insert into TRAVELTOUR(id, travelGroupId, version, CreateDate, LastUpdateTime) "
                    + "values('%s', '%s', 0, current_timestamp, current_timestamp)",
                    travelTourId, travelGroupId);
            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            for(int i = 0; i < 15; i++){
                String tourDate = calculateTourDate(travelgroup.getTourStartDate(), i);
                String tourDescription = i+1 < 15? "台北" : "返程";
                insertStr = String.format(
                        "insert into TRAVELTOURDETAIL(id, travelTourId, version, tourDate, tourDescription, tourIndex) "
                        + "values('%s', '%s', 0, '%s', '%s', %d)",
                        travelTourDetailId + i, travelTourId, tourDate, tourDescription, i);
                System.out.println(insertStr);
                st.executeUpdate(insertStr);
            }
        }catch(SQLException e){
            e.printStackTrace();
        }catch(Exception e){
            e.printStackTrace();
        }
        return true;
    }
    
    class ShutdownThread extends Thread {
        private Connection conn;
        ShutdownThread(Connection conn) {
            this.conn = conn;
        }
        public void run() {
            try {
                if(!conn.isClosed()){ this.conn.close(); }
            } catch (SQLException e) {}
        }
    }
}

