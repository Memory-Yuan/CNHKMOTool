/**
 * CNHKMOTool v1.3.0
 */

package CNHKMOTool;

import TravelApply.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import org.imgscalr.Scalr;

public class CNHKMOGUI extends javax.swing.JFrame {

    public CNHKMOGUI() {
        initComponents();
        initAllBlock();
        createLink();
        Runtime.getRuntime().addShutdownHook(new ShutdownThread(this.conn));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guidePanel = new javax.swing.JPanel();
        jScrollPanel1 = new javax.swing.JScrollPane();
        guideContent = new javax.swing.JTextArea();
        errMsgPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errMsgContent = new javax.swing.JTextArea();
        detailPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        detailConatent = new javax.swing.JTextArea();
        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        applyDocPath = new javax.swing.JFormattedTextField();
        selectApplyDocBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tourName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        folderPath = new javax.swing.JTextField();
        attachFilePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attachJList = new javax.swing.JList();
        selectAttachBtn = new javax.swing.JButton();
        removeAttachBtn = new javax.swing.JButton();
        removeAllAttachBtn = new javax.swing.JButton();
        setToHeadShot = new javax.swing.JButton();
        resetHeadShot = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        attachCountLabel = new javax.swing.JLabel();
        imageCheckBox = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        applyErrMsg = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        travellerJList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        peopleCountLabel = new javax.swing.JLabel();
        saveTourNameBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        batchSelectFolderBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        applyDataJList = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        applyDataCountLabel = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();
        removeApplyDataBtn = new javax.swing.JButton();
        selectFolderBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        showGuideBtn = new javax.swing.JButton();
        clearAllBtn = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        createLinkBtn = new javax.swing.JButton();
        closeLinkBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        dbStatusLabel = new javax.swing.JLabel();
        showDetailBtn = new javax.swing.JButton();

        guideContent.setColumns(20);
        guideContent.setRows(5);
        guideContent.setText("一、操作方法\n  1.新增申請資料夾（選擇完將自動帶入申請資料及附件）。\n    1)單筆新增：選擇資料夾如「CL02051006-0321-葉大雄 陳靜香(浙商15)」。\n    2)批次新增：選擇包含各筆資料的資料夾。\n    3)以上兩個方法皆可多重選擇。\n  2.確認各筆資料有無錯誤（有錯誤的資料會以紅色文字顯示，請自行修改）。\n  3.設定各申請人大頭照。\n  4.按下確定（新增成功的資料會在前方加上「成功」標籤）。\n  5.待處理完成之後選擇「關閉資料庫」或是關閉此工具。\n  6.至入台申請平台-離線版查詢資料應可找到各筆申請資料。\n\n二、注意事項：\n  1.在使用此工具之前，請先確定是否有先開啟入台證申請平台-離線版，\n    如有開啟，請將之關閉，才能夠使用。\n  2.在此工具資料庫連線中的情況下，無法使用入台證申請平台-離線版，\n    必須關閉資料庫連線或是關閉此工具。\n  3.如果遇到無法解析檔案的情況，可以試著把Word檔轉成2007以上版本。\n  4.以下資料無法從申請資料獲得，或可能無法辨識，因此必須手動填寫:\n    1) 旅行社 (預設為「浙江商務國際旅行社有限公司」)\n    2) 申請資格 (預設為「年滿20歲且有相當新臺幣20萬以上存款」)\n    3) 出生地\n    4) 職業類別\n    5) 居住城市\n    6) 大頭照");
        guideContent.setEnabled(false);
        jScrollPanel1.setViewportView(guideContent);

        javax.swing.GroupLayout guidePanelLayout = new javax.swing.GroupLayout(guidePanel);
        guidePanel.setLayout(guidePanelLayout);
        guidePanelLayout.setHorizontalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guidePanelLayout.createSequentialGroup()
                .addComponent(jScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        guidePanelLayout.setVerticalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guidePanelLayout.createSequentialGroup()
                .addComponent(jScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        errMsgContent.setColumns(20);
        errMsgContent.setLineWrap(true);
        errMsgContent.setRows(5);
        errMsgContent.setWrapStyleWord(true);
        jScrollPane1.setViewportView(errMsgContent);

        javax.swing.GroupLayout errMsgPanelLayout = new javax.swing.GroupLayout(errMsgPanel);
        errMsgPanel.setLayout(errMsgPanelLayout);
        errMsgPanelLayout.setHorizontalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        errMsgPanelLayout.setVerticalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errMsgPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        detailConatent.setColumns(20);
        detailConatent.setRows(5);
        jScrollPane6.setViewportView(detailConatent);

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CNHKMOTool-v1.3.0");
        setLocationByPlatform(true);
        setResizable(false);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel1.setText("申請資料");

        applyDocPath.setEnabled(false);

        selectApplyDocBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectApplyDocBtn.setText("瀏覽");
        selectApplyDocBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectApplyDocBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel4.setText("行程名稱");

        jLabel3.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel3.setText("資料位置");

        folderPath.setEditable(false);

        attachFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "附件", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("新細明體", 0, 13))); // NOI18N

        attachJList.setToolTipText("");
        attachJList.setCellRenderer(new AttachCellRenderer());
        jScrollPane3.setViewportView(attachJList);

        selectAttachBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectAttachBtn.setText("新增");
        selectAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAttachBtnActionPerformed(evt);
            }
        });

        removeAttachBtn.setText("移除");
        removeAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttachBtnActionPerformed(evt);
            }
        });

        removeAllAttachBtn.setText("全部移除");
        removeAllAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllAttachBtnActionPerformed(evt);
            }
        });

        setToHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        setToHeadShot.setText("設為大頭照");
        setToHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToHeadShotActionPerformed(evt);
            }
        });

        resetHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        resetHeadShot.setText("重設大頭照");
        resetHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHeadShotActionPerformed(evt);
            }
        });

        jLabel6.setText("附件數：");

        attachCountLabel.setText("0");

        imageCheckBox.setSelected(true);
        imageCheckBox.setText("顯示圖片");
        imageCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageCheckBoxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout attachFilePanelLayout = new javax.swing.GroupLayout(attachFilePanel);
        attachFilePanel.setLayout(attachFilePanelLayout);
        attachFilePanelLayout.setHorizontalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(imageCheckBox))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeAllAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeAttachBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetHeadShot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setToHeadShot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        attachFilePanelLayout.setVerticalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(setToHeadShot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectAttachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetHeadShot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAttachBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAllAttachBtn))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageCheckBox)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(attachCountLabel))))
        );

        applyErrMsg.setEditable(false);
        applyErrMsg.setColumns(20);
        applyErrMsg.setRows(5);
        jScrollPane5.setViewportView(applyErrMsg);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "申請人", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("新細明體", 0, 13))); // NOI18N

        travellerJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        travellerJList.setCellRenderer(new TravellerCellRenderer());
        travellerJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                travellerJListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(travellerJList);

        jLabel5.setText("人數：");

        peopleCountLabel.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(peopleCountLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peopleCountLabel)
                    .addComponent(jLabel5)))
        );

        saveTourNameBtn.setText("儲存");
        saveTourNameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTourNameBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveTourNameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attachFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(applyDocPath, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectApplyDocBtn)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveTourNameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(applyDocPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectApplyDocBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(attachFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        batchSelectFolderBtn.setText("批次新增");
        batchSelectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchSelectFolderBtnActionPerformed(evt);
            }
        });

        applyDataModel = new DefaultListModel();
        applyDataJList.setModel(applyDataModel);
        applyDataJList.setCellRenderer(new ApplyDataCellRenderer());
        applyDataJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                applyDataJListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(applyDataJList);

        jLabel8.setText("總筆數：");

        applyDataCountLabel.setText("0");

        refreshBtn.setText("重新整理");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        removeApplyDataBtn.setText("移除");
        removeApplyDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeApplyDataBtnActionPerformed(evt);
            }
        });

        selectFolderBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectFolderBtn.setText("單筆新增");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyDataCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(batchSelectFolderBtn)
                            .addComponent(refreshBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeApplyDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectFolderBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(applyDataCountLabel))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(batchSelectFolderBtn)
                            .addComponent(selectFolderBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshBtn)
                            .addComponent(removeApplyDataBtn))
                        .addContainerGap())))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        jLabel2.setText("狀態：");

        statusLabel.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        statusLabel.setText("正常。");

        showGuideBtn.setText("操作說明");
        showGuideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGuideBtnActionPerformed(evt);
            }
        });

        clearAllBtn.setText("全部清空");
        clearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBtnActionPerformed(evt);
            }
        });

        submit.setFont(new java.awt.Font("新細明體", 0, 16)); // NOI18N
        submit.setText("確定");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("新細明體", 0, 16)); // NOI18N
        exit.setText("離開");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        createLinkBtn.setText("連結資料庫");
        createLinkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createLinkBtnActionPerformed(evt);
            }
        });

        closeLinkBtn.setText("關閉資料庫");
        closeLinkBtn.setEnabled(false);
        closeLinkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeLinkBtnActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        jLabel9.setText("資料庫狀態：");

        dbStatusLabel.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        dbStatusLabel.setText("0");

        showDetailBtn.setText("詳細");
        showDetailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDetailBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dbStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(showGuideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createLinkBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeLinkBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(showDetailBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(statusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(dbStatusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showGuideBtn)
                            .addComponent(clearAllBtn)
                            .addComponent(createLinkBtn)
                            .addComponent(closeLinkBtn)
                            .addComponent(showDetailBtn))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        setBottomAreaDisable();
        setAllDisable();
        statusLabel.setText("處理中...");
        SwingWorker smworker = new SubmitWorker();
        smworker.execute();
    }//GEN-LAST:event_submitActionPerformed

    private void selectApplyDocBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectApplyDocBtnActionPerformed
        if(applyDataJList.getSelectedIndex() < 0){ return; }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇申請資料");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        FileFilter ff = new ExtensionFileFilter("Microsoft Word file(2003以上版本)", new String[] { "DOC", "DOCX" });
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();
            ad.setApplyDoc(fileChooser.getSelectedFile());
            setAllDisable();
            statusLabel.setText("讀取中...");
            SwingWorker drsworker = new DocReSelectWorker();
            drsworker.execute();
        }
    }//GEN-LAST:event_selectApplyDocBtnActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        int q = JOptionPane.showConfirmDialog(null, "真的要關閉嗎?", "關閉確認", JOptionPane.YES_NO_OPTION);
        if(q == 0){ System.exit(0); }
    }//GEN-LAST:event_exitActionPerformed

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇資料夾");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[] {});
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            initSingleApplyBlock();
            setAllDisable();
            statusLabel.setText("讀取中...");
            SwingWorker fworker = new FolderWorker(files);
            fworker.execute();
        }
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void showGuideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGuideBtnActionPerformed
        JOptionPane.showMessageDialog(null, guidePanel, "操作說明", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_showGuideBtnActionPerformed

    private void clearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBtnActionPerformed
        initAllBlock();
    }//GEN-LAST:event_clearAllBtnActionPerformed

    
    /**
     *   將所有附件的類型都設為2(一般附件)。
     */
    private void resetHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetHeadShotActionPerformed
        if(attachJList.getModel().getSize() <= 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();

        for(Attach a : la){
            a.setType("2");
        }

        setAttachJList();
    }//GEN-LAST:event_resetHeadShotActionPerformed

    /**
     *   先將所有附件的類型都設為2(一般附件)，再將選擇附件的類型設為1(大頭照)。
     */
    private void setToHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToHeadShotActionPerformed
        if(attachJList.getSelectedIndices().length == 0){
            showMessage("請選擇照片。", "warning");
            return;
        }else if(attachJList.getSelectedIndices().length > 1){
            showMessage("大頭照只能選擇一張。", "warning");
            return;
        }

        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();
        for(Attach a : la){
            a.setType("2");
        }

        Attach attach = (Attach)attachJList.getSelectedValue();
        attach.setType("1");

        setAttachJList();
    }//GEN-LAST:event_setToHeadShotActionPerformed

    private void removeAllAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllAttachBtnActionPerformed
        if(travellerJList.getSelectedIndex() < 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        tr.setAttachList(new ArrayList<Attach>());
        setAttachJList();
    }//GEN-LAST:event_removeAllAttachBtnActionPerformed

    private void removeAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttachBtnActionPerformed
        if( attachJList.getSelectedIndices().length == 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();
        la.removeAll(attachJList.getSelectedValuesList());
        setAttachJList();
    }//GEN-LAST:event_removeAttachBtnActionPerformed

    private void selectAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAttachBtnActionPerformed
        if(travellerJList.getSelectedIndex() < 0){ return; }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇附件");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("圖片(jpg, jpeg, png)", new String[] { "JPG", "JPEG", "PNG" });
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            Traveller tr = (Traveller)travellerJList.getSelectedValue();
            List<Attach> la = tr.getAttachList();
            for (File file : files) {
                Attach a = new Attach();
                a.setFile(file);
                la.add(a);
            }
            setAttachJList();
        }
    }//GEN-LAST:event_selectAttachBtnActionPerformed

    private void imageCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageCheckBoxMouseClicked
        setAttachJList();
    }//GEN-LAST:event_imageCheckBoxMouseClicked

    private void batchSelectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchSelectFolderBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇資料夾");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[] {});
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
//            initAllBlock();
            File[] files = fileChooser.getSelectedFiles();
            setAllDisable();
            statusLabel.setText("讀取中...");
            SwingWorker rfworker = new RootFolderWorker(files);
            rfworker.execute();
        }
    }//GEN-LAST:event_batchSelectFolderBtnActionPerformed

    private void createLinkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createLinkBtnActionPerformed
        createLink();
    }//GEN-LAST:event_createLinkBtnActionPerformed

    private void closeLinkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeLinkBtnActionPerformed
        try {
            if(!this.conn.isClosed()){
                DriverManager.getConnection("jdbc:derby:"+ dbPath +";shutdown=true");
                this.conn.close();
            }
        } catch (SQLException e) {
            if(e.getSQLState().equals("08006")){    //08006代表關閉特定資料庫
                createLinkBtn.setEnabled(true);
                closeLinkBtn.setEnabled(false);
                submit.setEnabled(false);
                dbStatusLabel.setText("離線。");
            }
        }
    }//GEN-LAST:event_closeLinkBtnActionPerformed

    private void applyDataJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_applyDataJListValueChanged
        if (!evt.getValueIsAdjusting()) {//This line prevents double events
            if(applyDataJList.getSelectedIndex() < 0){ return; }  //變成-1代表沒選中，所以不需要繼續
            setAllDisable();
            statusLabel.setText("讀取中...");
            SwingWorker saworker = new SingleApplyWorker();
            saworker.execute();
        }
    }//GEN-LAST:event_applyDataJListValueChanged

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        applyDataJList.repaint();
    }//GEN-LAST:event_refreshBtnActionPerformed

    /**
     * 每次迴圈都刪掉第一個選中的，之所以要這樣做，
     * 是因為他每刪除一個元素，整個index都會改變，
     * 所以必須每次重頭開始loop，直到選擇的元素都被刪除。
     */
    private void removeApplyDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeApplyDataBtnActionPerformed
        while(true){
            if( applyDataJList.getSelectedIndices().length == 0){ initSingleApplyBlock(); break; }
            applyDataModel.remove(applyDataJList.getSelectedIndices()[0]);
        }
        btnEnableChk();
    }//GEN-LAST:event_removeApplyDataBtnActionPerformed

    private void travellerJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_travellerJListValueChanged
        if (!evt.getValueIsAdjusting()) {//This line prevents double events
            setAttachJList();
        }
    }//GEN-LAST:event_travellerJListValueChanged

    private void showDetailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDetailBtnActionPerformed
        if(applyDataJList.getSelectedIndices().length != 1){ return; }
        detailConatent.setText("");
        String line = "\n";
        
        ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();
        TravelGroup travelgroup = ad.getTravelgroup();
        detailConatent.append("行程名稱：" + travelgroup.getTourName() + line);
        detailConatent.append("旅客人數：" + travelgroup.getGroupCount() + line);
        detailConatent.append("入境日期：" + travelgroup.getTourStartDate() + line);
        detailConatent.append("緊急聯絡人-姓名：" + travelgroup.getContactNameOfMainland() + line);
        detailConatent.append("緊急聯絡人-關係：" + travelgroup.getContactTitleOfMainland() + line);
        detailConatent.append("緊急聯絡人-手機：" + travelgroup.getContactMobileNoOfMainland() + line);
        detailConatent.append("緊急聯絡人-性別：" + travelgroup.getContactGenderOfMainlandMean() + line);
        detailConatent.append("緊急聯絡人-電話：" + travelgroup.getContactTelNoOfMainland() + line);
        detailConatent.append("緊急聯絡人-地址：" + travelgroup.getContactAddressOfMainland() + line);
        detailConatent.append(line);
        for(int i = 0; i < ad.getTravellerModel().size(); i++){
            Traveller traveller = (Traveller)ad.getTravellerModel().get(i);
            String str;
            if(i == 0 ){
                str = "主申請人";
            }else{
                str = "隨同親屬" + i;
            }
            detailConatent.append("-- " + str + " ----------------------------------------" + line);
            detailConatent.append("中文姓名：" + traveller.getChineseName() + line);
            detailConatent.append("性別:" + traveller.getGenderMean() + line);
            detailConatent.append("出生年月日：" + traveller.getBirthDate() + line);
            detailConatent.append("拼音姓名：" + traveller.getEnglishName() + line);
            detailConatent.append("通行證號碼：" + traveller.getPassportNo() + line);
            detailConatent.append("通行證有效期至：" + traveller.getPassportExpiryDate() + line);
            detailConatent.append("身份證號：" + traveller.getPersonId() + line);
            detailConatent.append("教育程度：" + traveller.getEducationMean() + line);
            detailConatent.append("現職：" + traveller.getOccupationDesc() + line);
            detailConatent.append("居住城市：" + traveller.getLiningCityMean() + line);
            detailConatent.append("住址：" + traveller.getAddress() + line);
            detailConatent.append("為臺灣人民之配偶：" + traveller.getPartnerOfTaiwanMean() + line);
            detailConatent.append("隨行親友姓名：" + traveller.getRelative() + line);
            detailConatent.append("隨行親友稱謂：" + traveller.getRelativeTitle() + line);
            detailConatent.append(line);
        }
        detailConatent.setCaretPosition(0);
        JOptionPane.showMessageDialog(null, detailPanel, "申請資料", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_showDetailBtnActionPerformed

    private void saveTourNameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTourNameBtnActionPerformed
        if(applyDataJList.getSelectedIndex() < 0){ return; }
        if(applyDataJList.getSelectedIndices().length > 1){ return; }
        ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();
        ad.setTourName(tourName.getText());
        applyDataJList.repaint();
        checkErrMsg();
    }//GEN-LAST:event_saveTourNameBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*  改變UI的style，Windows風格
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                */
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CNHKMOGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel applyDataCountLabel;
    private javax.swing.JList applyDataJList;
    private DefaultListModel applyDataModel;
    private javax.swing.JFormattedTextField applyDocPath;
    private javax.swing.JTextArea applyErrMsg;
    private javax.swing.JLabel attachCountLabel;
    private javax.swing.JPanel attachFilePanel;
    private javax.swing.JList attachJList;
    private javax.swing.JButton batchSelectFolderBtn;
    private javax.swing.JButton clearAllBtn;
    private javax.swing.JButton closeLinkBtn;
    private javax.swing.JButton createLinkBtn;
    private javax.swing.JLabel dbStatusLabel;
    private javax.swing.JTextArea detailConatent;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JTextArea errMsgContent;
    private javax.swing.JPanel errMsgPanel;
    private javax.swing.JButton exit;
    private javax.swing.JTextField folderPath;
    private javax.swing.JTextArea guideContent;
    private javax.swing.JPanel guidePanel;
    private static javax.swing.JCheckBox imageCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel peopleCountLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeAllAttachBtn;
    private javax.swing.JButton removeApplyDataBtn;
    private javax.swing.JButton removeAttachBtn;
    private javax.swing.JButton resetHeadShot;
    private javax.swing.JButton saveTourNameBtn;
    private javax.swing.JButton selectApplyDocBtn;
    private javax.swing.JButton selectAttachBtn;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JButton setToHeadShot;
    private javax.swing.JButton showDetailBtn;
    private javax.swing.JButton showGuideBtn;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton submit;
    private javax.swing.JTextField tourName;
    private javax.swing.JList travellerJList;
    // End of variables declaration//GEN-END:variables
    private static Connection conn;
    private static final String dbPath = "D:/CNHKMO/db/CNHKMO";
//    private static final String dbPath = "db/CNHKMO";
//    private static final int IMG_SIZE = 500;
    
    private void initAllBlock(){
        applyDataModel.removeAllElements();
        applyDataCountLabel.setText("0");
        submit.setEnabled(false);
        initSingleApplyBlock();
        btnEnableChk();
    }
    
    private void initSingleApplyBlock(){
        tourName.setText("");
        folderPath.setText("");
        applyDocPath.setText("");
        travellerJList.setModel(new DefaultListModel());
        attachJList.setModel(new DefaultListModel());
        peopleCountLabel.setText("0");
        attachCountLabel.setText("0");
    }

    private void createLink(){
        createLink(dbPath);
    }
    
    private void createLink(String Path)  {
        try{
            if(this.conn != null && this.conn.isValid(2000)){
                showMessage("資料庫已連結！", "warning");
                return;
            }
//            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();  //此行用不到
            this.conn = DriverManager.getConnection("jdbc:derby:"+Path);
            dbStatusLabel.setText("連線中。");
            createLinkBtn.setEnabled(false);
            closeLinkBtn.setEnabled(true);
            btnEnableChk();
            
            Statement st = conn.createStatement();
            try {
                st.execute("select * from TravelGroup");
            } catch(SQLException e) {
                System.out.println("Table不存在！");
                e.printStackTrace();
                showMessage("Table不存在！\n詳細:\n" + e.getMessage(), "err");
            }finally{
                st.close();
            }
        }catch(SQLException e){
            System.out.println("資料庫連結失敗！");
            e.printStackTrace();
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。\n詳細:\n" + e.getMessage(), "warning");
        }catch(Exception e){
            System.out.println("資料庫連結失敗！");
            e.printStackTrace();
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。\n詳細:\n" + e.getMessage() , "warning");
        }
    }

    /**
     * 根據param，設定ApplyDataJList選中第一個(false)或最後一個(true)。
     * 預設是第一個傳false。
     * @param last 
     */
    private void setApplyDataJList(){
        setApplyDataJList(false);
    }
    
    private void setApplyDataJList(boolean last){
        if(applyDataModel.size() > 0){
            applyDataJList.setSelectedIndex(last? applyDataModel.size()-1 : 0);
            applyDataCountLabel.setText(String.valueOf(applyDataModel.size()));
        }
    }
    
//    private boolean isRepeatFolder(File f){
//        for(int i = 0; i < applyDataModel.size(); i++){
//            ApplyData ad = (ApplyData)applyDataModel.get(i);
//            if(f.getAbsolutePath().equals(ad.getApplyFolder().getAbsolutePath())){
//                showMessage("所選資料夾已經存在於列表。", "warning");
//                return true;
//            }
//        }
//        return false;
//    }
    
    /**
     * 在變換applyDataJList的選擇的元素時，會啟動，
     * 主要就是顯示右方區域資料
     */
    private void setSingleApply(){
        try{
        initSingleApplyBlock();
        if(applyDataJList.getSelectedIndex() < 0){ return; }
        ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();

        folderPath.setText(ad.getApplyFolder().getAbsolutePath());
        applyDocPath.setText(ad.getApplyDoc() == null? "" : ad.getApplyDoc().getAbsolutePath());
        tourName.setText(ad.getTourName());

        travellerJList.setModel(ad.getTravellerModel());
        if(travellerJList.getModel().getSize() > 0){
            travellerJList.setSelectedIndex(0);
            peopleCountLabel.setText(String.valueOf(travellerJList.getModel().getSize()));
        }else{
            attachJList.setModel(new DefaultListModel());
        }
        }catch(Exception e){e.printStackTrace();}
    }
    
    /**
     * 更新附件區域。
     */
    private void setAttachJList(){
        setAllDisable();
        statusLabel.setText("讀取中...");
        SwingWorker alworker = new AttachListWorker();
        alworker.execute();
    }

    private void setAttachAreaDisable(){
        selectAttachBtn.setEnabled(false);
        setToHeadShot.setEnabled(false);
        resetHeadShot.setEnabled(false);
        removeAttachBtn.setEnabled(false);
        removeAllAttachBtn.setEnabled(false);
        travellerJList.setEnabled(false);
        attachJList.setEnabled(false);
    }
    
    private void setAttachAreaEnable(){
        selectAttachBtn.setEnabled(true);
        setToHeadShot.setEnabled(true);
        resetHeadShot.setEnabled(true);
        removeAttachBtn.setEnabled(true);
        removeAllAttachBtn.setEnabled(true);
        travellerJList.setEnabled(true);
        attachJList.setEnabled(true);
    }
    
    private void setBottomAreaDisable(){
        createLinkBtn.setEnabled(false);
        closeLinkBtn.setEnabled(false);
        clearAllBtn.setEnabled(false);
        submit.setEnabled(false);
        exit.setEnabled(false);
    }
    
    private void setBottomAreaEnable(){
        createLinkBtn.setEnabled(false);
        closeLinkBtn.setEnabled(false);
        clearAllBtn.setEnabled(false);
        exit.setEnabled(false);
    }
    
    private void setAllDisable(){
        batchSelectFolderBtn.setEnabled(false);
        applyDataJList.setEnabled(false);
        setAttachAreaDisable();
        tourName.setEnabled(false);
        showDetailBtn.setEnabled(false);
        selectFolderBtn.setEnabled(false);
        selectApplyDocBtn.setEnabled(false);
        batchSelectFolderBtn.setEnabled(false);
        refreshBtn.setEnabled(false);
        removeApplyDataBtn.setEnabled(false);
    }
    
    /**
     * 確認所有的按鈕&List是否可被Enable
     */
    private void btnEnableChk(){
        batchSelectFolderBtn.setEnabled(true);
        selectFolderBtn.setEnabled(true);
        selectApplyDocBtn.setEnabled(true);
        tourName.setEnabled(true);
        showDetailBtn.setEnabled(true);
        refreshBtn.setEnabled(true);
        removeApplyDataBtn.setEnabled(true);
        clearAllBtn.setEnabled(true);
        exit.setEnabled(true);
        if(applyDataModel.size() > 0){ applyDataJList.setEnabled(true); }
        
        if(travellerJList.getModel().getSize() > 0){ setAttachAreaEnable(); }
        
        try{
            if(this.conn == null || this.conn.isClosed()){
                createLinkBtn.setEnabled(true);
            }else{
                closeLinkBtn.setEnabled(true);
                if(applyDataJList.getModel().getSize() > 0){
                    submit.setEnabled(true);
                }
            }
        }catch(SQLException ignore){}
        
    }
    
    private void showMessage(String msg){
        showMessage(msg, "info");
    }
    
    private void showMessage(String msg, String type){
        if(type.equals("info")){
            JOptionPane.showMessageDialog(null, msg, "訊息", JOptionPane.INFORMATION_MESSAGE);
        }else if(type.equals("warning")){
            JOptionPane.showMessageDialog(null, msg, "注意", JOptionPane.WARNING_MESSAGE);
        }else if(type.equals("err")){
            errMsgContent.setText(msg);
            JOptionPane.showMessageDialog(null, errMsgPanel, "錯誤", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }
    
    /**
     * 將一筆申請資料傳入資料庫
     * @param applyData
     * @return 儲存成功return true
     */
    private boolean insertData(ApplyData applyData){
        TravelGroup travelgroup = applyData.getTravelgroup();
        DefaultListModel travellerModel = applyData.getTravellerModel();
        
        travelgroup.setApplyDate();
        travelgroup.setNiaApplyDate();
        
        //自行生出ID
        String idBase = CommonHelp.getNowTimeToSS();  //已毫秒來當底，才不會重複
        String travelGroupId = idBase + "tg";
        String travellerId = idBase + "tr";
        String travelTourId = idBase + "tt";
        String travelTourDetailId = idBase + "ttd";

        try{
            Statement st = conn.createStatement();
            String insertStr;
            
            travelgroup.setId(travelGroupId);
            insertStr= travelgroup.getInsertStr();
//            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            for(int i = 0; i < travellerModel.size(); i++){
                Traveller traveller = (Traveller)travellerModel.get(i);
                traveller.setId(travellerId + i);
                traveller.setTravelGroupId(travelGroupId);
                insertStr = traveller.getInsertStr();
//                System.out.println(insertStr);
                st.executeUpdate(insertStr);
                
                insertStr = "insert into APPLYCASEATTACH(id, TRAVELLERID, version, fileName, attachType, attachFile, CreateDate) "
                        + "values(?, ?, 0, ?, ?, ?, current_timestamp)";
//                System.out.println(insertStr);
                List<Attach> la = traveller.getAttachList();
                for(int j = 0; j < la.size(); j++){
//                    File file = imageProcess(la.get(j).getFile());
                    File file = la.get(j).getFile();
                    InputStream fin = new FileInputStream(file);
                    PreparedStatement ps = conn.prepareStatement(insertStr);
                    ps.setString(1, traveller.getId() + "at" + j);
                    ps.setString(2, traveller.getId());
                    ps.setString(3, file.getName());
                    ps.setString(4, la.get(j).getType());
                    ps.setBinaryStream(5, fin);
                    ps.execute();
                    fin.close();
                }
            }
            
            insertStr = String.format(
                    "insert into TRAVELTOUR(id, travelGroupId, version, CreateDate, LastUpdateTime) "
                    + "values('%s', '%s', 0, current_timestamp, current_timestamp)",
                    travelTourId, travelGroupId);
//            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            for(int i = 0; i < 15; i++){
                String tourDate = CommonHelp.calculateTourDate(travelgroup.getTourStartDate(), i);
                String tourDescription = i+1 < 15? "台北" : "返程";
                insertStr = String.format(
                        "insert into TRAVELTOURDETAIL(id, travelTourId, version, tourDate, tourDescription, tourIndex) "
                        + "values('%s', '%s', 0, '%s', '%s', %d)",
                        travelTourDetailId + i, travelTourId, tourDate, tourDescription, i);
//                System.out.println(insertStr);
                st.executeUpdate(insertStr);
            }
        }catch(IOException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(SQLException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(ParseException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(Exception e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
        return true;
    }

    /**
     * 確認每筆資料有無錯誤訊息，有就顯示在applyErrMsg
     */
    private void checkErrMsg(){
        applyErrMsg.setText("");
        ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();
        List<String> peml = ad.getProcessErrMsg();
        List<String> eml = ad.getErrMsgList();
        if(peml.size() != 0){
            for(String s : peml){
                applyErrMsg.append(s + "\n");
            }
            ad.clearProcessErr();
        }else{
            for(String s : eml){
                applyErrMsg.append(s + "\n");
            }
        }
    }
    
    class ExtensionFileFilter extends FileFilter {
        String description;
        String extensions[];

        public ExtensionFileFilter(String description, String extension) {
            this(description, new String[] { extension });
        }

        public ExtensionFileFilter(String description, String extensions[]) {
            if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
            this.extensions = (String[]) extensions.clone();
            toLower(this.extensions);
        }

        private void toLower(String array[]) {
            for (int i = 0, n = array.length; i < n; i++) {
                array[i] = array[i].toLowerCase();
            }
        }

        public String getDescription() {
            return description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            } else {
                String path = file.getAbsolutePath().toLowerCase();
                for (int i = 0, n = extensions.length; i < n; i++) {
                    String extension = extensions[i];
                    if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    
    /**
     * 附件的cellrender
     */
    private static class AttachCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof Attach) {
                Attach attach = (Attach) value;
                if(attach.getType().equals("1")){
                    setText("[大頭照] " + attach.getFile().getName());
                }else{
                    setText(attach.getFile().getName());
                }
                
                //根據使用者是否勾選顯示圖片來決定圖示的顯示方式
                if(imageCheckBox.isSelected()){
                    setIcon(attach.getImageIcon());
                }else{
                    setIcon(FileSystemView.getFileSystemView().getSystemIcon(attach.getFile()));
                }
                
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }
    
    /**
     * 申請人的cellrender
     * 確認每個申請人有沒有設定附件，沒有就以紅色文字顯示
     */
    private static class TravellerCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof Traveller) {
                Traveller traveller = (Traveller) value;
                String applyType = traveller.getSeqNo() == 0? "[主]" : "[隨]";
                setText(applyType + " " + traveller.getChineseName());
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    if(traveller.isPass()){
                        setForeground(list.getSelectionForeground());
                    }else{
                        setForeground(Color.RED);
                    }
                } else {
                    setBackground(list.getBackground());
                    if(traveller.isPass()){
                        setForeground(list.getForeground());
                    }else{
                        setForeground(Color.RED);
                    }
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }
    
    /**
     * 申請資料的cellrender
     * 確認該筆申請資料是否正確，有誤就以紅色文字顯示。
     */
    private static class ApplyDataCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof ApplyData) {
                ApplyData applyData = (ApplyData) value;
                if(applyData.isSuccess()){
                    setText("[完成] " + applyData.getTourName());
                }else{
                    setText(applyData.getTourName());
                }
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    if(applyData.isPass()){
                        setForeground(list.getSelectionForeground());
                    }else{
                        setForeground(Color.RED);
                    }
                } else {
                    setBackground(list.getBackground());
                    if(applyData.isPass()){
                        setForeground(list.getForeground());
                    }else{
                        setForeground(Color.RED);
                    }
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }
    
    /**
     * 處理批次資料夾選擇的Worker
     */
    public class RootFolderWorker extends SwingWorker<Void, Void> {
        private File[] folderList;
        public RootFolderWorker(File[] fs){
            this.folderList = fs;
        }
        
        @Override
        public Void doInBackground() {
            String msg;
            int i = 1;
            for(File folder : folderList){
                File[] fileList = folder.listFiles();
                int j = 1;
                for(File f : fileList){
                    msg = String.format("處理中...(資料夾：%d/%d , %d/%d筆)", i, folderList.length, j, fileList.length);
                    statusLabel.setText(msg);
                    ApplyData ad = new ApplyData(f);

                    applyDataModel.addElement(ad);
                    j++;
                }
                i++;
            }
            setApplyDataJList();
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            btnEnableChk();
        }
    } 
    
    /**
     * 顯示右方資料的Worker
     */
    public class SingleApplyWorker extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() {
            setSingleApply();
            checkErrMsg();
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            btnEnableChk();
        }
    } 
    
    /**
     * 選擇單筆資料的Worker
     */
    public class FolderWorker extends SwingWorker<Void, Void> {
        private File[] folderList;
        public FolderWorker(File[] fs){
            this.folderList = fs;
        }
        
        @Override
        public Void doInBackground() {
            String msg;
            int i = 1;
            for(File folder : folderList){
                msg = String.format("處理中...(%d/%d筆)", i, folderList.length);
                statusLabel.setText(msg);
                ApplyData ad = new ApplyData(folder);
                applyDataModel.addElement(ad);
                i++;
            }
            setApplyDataJList(true);
            checkErrMsg();
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            btnEnableChk();
        }
    }
    
    /**
     * 處理找不到文件，使用者重新選擇文件時的Worker
     * 
     */
    public class DocReSelectWorker extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
            ApplyData ad = (ApplyData)applyDataJList.getSelectedValue();
            ad.justDocProcess();
            setSingleApply();
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            btnEnableChk();
        }
    }

    /**
     * 處理更新附件區域的Worker
     */
    public class AttachListWorker extends SwingWorker<Boolean, Void> {
        @Override
        public Boolean doInBackground() {
            if(travellerJList.getSelectedIndex() < 0){ return false; }
            attachJList.setModel(new DefaultListModel());
            Traveller tr = (Traveller)travellerJList.getSelectedValue();
            List<Attach> la = tr.getAttachList();
            DefaultListModel model = new DefaultListModel();
            for(Attach a : la){
                model.addElement(a);
            }
            attachJList.setModel(model);
            checkErrMsg();
            return true;
        }

        @Override
        protected void done() {
            try {
                attachCountLabel.setText(String.valueOf(attachJList.getModel().getSize()));
                statusLabel.setText("讀取完成。");
                if(get()){
                    btnEnableChk();
                }
            } catch (Exception ignore) {}
        }
    }
    
    /**
     * 處理submit的Worker
     * 過濾已完成及不合格的申請資料
     */
    public class SubmitWorker extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
            for(int i = 0; i < applyDataModel.size(); i++){
                ApplyData applyData = (ApplyData)applyDataModel.get(i);
                if(applyData.isSuccess()){
                    continue;
                }
                if(applyData.isPass()){
                    if(insertData(applyData)){
                        applyData.setStatus(true);
                    }
                }
            }
            return null;
        }

        @Override
        protected void done() {
            btnEnableChk();
            statusLabel.setText("處理完畢");
        }
    }

    class ShutdownThread extends Thread {
        private Connection conn;
        ShutdownThread(Connection conn) {
            this.conn = conn;
        }
        public void run() {
            try {
                if(!conn.isClosed()){
                    this.conn.close();
                }
            } catch (SQLException e) {}
        }
    }
}

