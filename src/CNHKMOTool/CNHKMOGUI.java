package CNHKMOTool;

import TravelApply.*;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.*;
import org.apache.logging.log4j.Level;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class CNHKMOGUI extends javax.swing.JFrame {

    public CNHKMOGUI() {
        initComponents();
        this.config = new Config();
        if(this.config.getConfig() == null){
            showMessage("載入Config檔失敗！", "err");
        }
        initAllArea();
        initSettingArea();
        createLink();
        Runtime.getRuntime().addShutdownHook(new ShutdownThread(this.conn));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guidePanel = new javax.swing.JPanel();
        jScrollPanel1 = new javax.swing.JScrollPane();
        guideContent = new javax.swing.JTextArea();
        errMsgPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errMsgContent = new javax.swing.JTextArea();
        treejPopupMenu = new javax.swing.JPopupMenu();
        reResolveMenuItem = new javax.swing.JMenuItem();
        addTravellerjMenuItem = new javax.swing.JMenuItem();
        asMainMenuItem = new javax.swing.JMenuItem();
        removejMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        expandjMenuItem = new javax.swing.JMenuItem();
        expandAlljMenuItem = new javax.swing.JMenuItem();
        collapsejMenuItem = new javax.swing.JMenuItem();
        collapseAlljMenuItem = new javax.swing.JMenuItem();
        myFileChooser = new javax.swing.JFileChooser();
        settingPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        settingTotalTourDaysSpinner = new javax.swing.JSpinner();
        settingTravelAgencyComboBox = new javax.swing.JComboBox();
        settingDBPathText = new javax.swing.JTextField();
        settingDBButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        settingResolveModeComboBox = new javax.swing.JComboBox();
        settingHeadShotNameText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        settingInsuranceAPIAddressText = new javax.swing.JTextField();
        settingInsuranceNoAddressText = new javax.swing.JTextField();
        settingInsuranceNameText = new javax.swing.JTextField();
        settingInsuranceEmailText = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dbStatusLabel = new javax.swing.JLabel();
        treePanel = new javax.swing.JPanel();
        applyDataTreeScrollPane = new javax.swing.JScrollPane();
        rootNode = new DefaultMutableTreeNode("root");
        applyDataTreeModel = new DefaultTreeModel(rootNode);
        applyDataTreeModel.addTreeModelListener(new MyTreeModelListener());
        applyDataTree = new javax.swing.JTree();
        jLabel8 = new javax.swing.JLabel();
        applyDataCountLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        loadingPanel = new javax.swing.JPanel();
        applyDataPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tourNameText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        folderPath = new javax.swing.JTextField();
        applyDocPanel = new javax.swing.JPanel();
        applyDocPath = new javax.swing.JFormattedTextField();
        selectApplyDocBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        contactNameText = new javax.swing.JTextField();
        contactTitleText = new javax.swing.JTextField();
        contactMobileNoText = new javax.swing.JTextField();
        contactTelNoText = new javax.swing.JTextField();
        contactAddressText = new javax.swing.JTextField();
        contactGenderComboBox = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        tgTourEndDateText = new javax.swing.JTextField();
        applyDataSaveBtn = new javax.swing.JButton();
        tgTourStartDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        tgTravelAgencyText = new javax.swing.JTextField();
        tgTotalTourDaysText = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        applyErrMsg = new javax.swing.JTextArea();
        travellerPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        travellerDetailPanel = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        trGroupNameText = new javax.swing.JTextField();
        trChineseNameText = new javax.swing.JTextField();
        trBirthDateText = new javax.swing.JTextField();
        trEnglishNameText = new javax.swing.JTextField();
        trPassportNoText = new javax.swing.JTextField();
        trPassportExpiryDateText = new javax.swing.JTextField();
        trPersonIdText = new javax.swing.JTextField();
        trOccupationDescText = new javax.swing.JTextField();
        trAddressText = new javax.swing.JTextField();
        travellerSaveBtn = new javax.swing.JButton();
        trGenderComboBox = new javax.swing.JComboBox();
        trEducationComboBox = new javax.swing.JComboBox();
        trLivingCityComboBox = new javax.swing.JComboBox();
        trApplyQualificationComboBox = new javax.swing.JComboBox();
        trOccupationComboBox = new javax.swing.JComboBox();
        trBirthPlace1ComboBox = new javax.swing.JComboBox();
        trBirthPlace2Text = new javax.swing.JTextField();
        trRelativePanel = new javax.swing.JPanel();
        trRelativeLabel = new javax.swing.JLabel();
        trRelativeText = new javax.swing.JTextField();
        trRelativeTitleText = new javax.swing.JTextField();
        trRelativeTitleLabel = new javax.swing.JLabel();
        attachFilePanel = new javax.swing.JPanel();
        attachScrollPane = new javax.swing.JScrollPane();
        attachJList = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        attachCountLabel = new javax.swing.JLabel();
        imageCheckBox = new javax.swing.JCheckBox();
        jToolBar2 = new javax.swing.JToolBar();
        resetHeadShot = new javax.swing.JButton();
        setToHeadShot = new javax.swing.JButton();
        jToolBar6 = new javax.swing.JToolBar();
        selectAttachBtn = new javax.swing.JButton();
        removeAllAttachBtn = new javax.swing.JButton();
        removeAttachBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        selectRestAttachBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        restApplyAttachList = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        travellerErrMsg = new javax.swing.JTextArea();
        topPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        batchSelectFolderBtn = new javax.swing.JButton();
        selectFolderBtn = new javax.swing.JButton();
        refreshTreeBtn = new javax.swing.JButton();
        removeApplyDataBtn = new javax.swing.JButton();
        clearAllBtn = new javax.swing.JButton();
        reResolveButton = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        submit = new javax.swing.JButton();
        insuranceApply = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        createLinkBtn = new javax.swing.JButton();
        closeLinkBtn = new javax.swing.JButton();
        cleanBDButton = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        showGuideBtn = new javax.swing.JButton();
        settingButton = new javax.swing.JButton();

        guideContent.setEditable(false);
        guideContent.setColumns(20);
        guideContent.setRows(5);
        guideContent.setText("一、操作方法 - 儲存資料\n  1.新增申請資料夾（選擇完將自動帶入申請資料及附件）。\n    1)單筆新增：選擇資料夾如「CL02051006-0321-葉大雄 陳靜香(浙商15)」。\n    2)批次新增：選擇包含各筆資料的資料夾。\n    3)以上兩個方法皆可多重選擇。\n  2.確認各筆資料有無錯誤，修改請記得儲存才能生效。\n  3.確認附件及設定各申請人大頭照。\n  4.按下儲存資料（新增成功的資料會在前方加上「儲存成功」標籤，反之為「儲存失敗」）。\n  5.待處理完成之後選擇「關閉資料庫」或是關閉此工具。\n  6.至入台申請平台-離線版查詢資料應可找到各筆申請資料。\n\n二、操作方法 - 申請保單(接續 操作方法 - 儲存資料 第4點)\n  1.按下保險申請 (申請成功會在前方加上「申請成功」標籤，反之為「申請失敗」。)\n\n二、注意事項：\n  1.在使用此工具之前，請先確定是否有先開啟入台證申請平台-離線版，\n    如有開啟，請將之關閉，才能夠使用。\n  2.在此工具資料庫連線中的情況下，無法使用入台證申請平台-離線版，\n    必須關閉資料庫連線或是關閉此工具。\n  3.如果遇到無法解析檔案的情況，可以試著把Word檔轉成2007以上版本。\n  4.以下資料無法從申請資料獲得，或可能無法辨識，因此必須手動填寫:\n    1) 申請資格 (預設為「年滿20歲且有相當新臺幣20萬以上存款」)\n    2) 出生地\n    3) 職業類別\n    4) 居住城市\n    5) 大頭照 (可設定解析時的預設檔名)\n  5.文字顏色意義\n    1)紅色代表錯誤，該筆資料不會被儲存(申請)，或是該筆資料儲存(申請)失敗，或是保險未申請。\n    2)黃色代表警告，該筆資料可以被儲存，但是最後仍需至入台證申請平台修改。\n    3)綠色代表儲存(申請)成功。");
        jScrollPanel1.setViewportView(guideContent);

        javax.swing.GroupLayout guidePanelLayout = new javax.swing.GroupLayout(guidePanel);
        guidePanel.setLayout(guidePanelLayout);
        guidePanelLayout.setHorizontalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guidePanelLayout.createSequentialGroup()
                .addComponent(jScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        guidePanelLayout.setVerticalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );

        errMsgContent.setColumns(20);
        errMsgContent.setLineWrap(true);
        errMsgContent.setRows(5);
        errMsgContent.setWrapStyleWord(true);
        jScrollPane1.setViewportView(errMsgContent);

        javax.swing.GroupLayout errMsgPanelLayout = new javax.swing.GroupLayout(errMsgPanel);
        errMsgPanel.setLayout(errMsgPanelLayout);
        errMsgPanelLayout.setHorizontalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        errMsgPanelLayout.setVerticalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errMsgPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        reResolveMenuItem.setText("重新解析");
        reResolveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reResolveMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(reResolveMenuItem);

        addTravellerjMenuItem.setText("新增旅客");
        addTravellerjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTravellerjMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(addTravellerjMenuItem);

        asMainMenuItem.setText("設為主申請人");
        asMainMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asMainMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(asMainMenuItem);

        removejMenuItem.setText("移除");
        removejMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(removejMenuItem);
        treejPopupMenu.add(jSeparator1);

        expandjMenuItem.setText("展開");
        expandjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandjMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(expandjMenuItem);

        expandAlljMenuItem.setText("全部展開");
        expandAlljMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandAlljMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(expandAlljMenuItem);

        collapsejMenuItem.setText("收合");
        collapsejMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapsejMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(collapsejMenuItem);

        collapseAlljMenuItem.setText("全部收合");
        collapseAlljMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseAlljMenuItemActionPerformed(evt);
            }
        });
        treejPopupMenu.add(collapseAlljMenuItem);

        myFileChooser.setFileFilter(null);

        jLabel31.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel31.setText("旅遊天數");

        jLabel25.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel25.setText("旅行社");

        jLabel40.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel40.setText("資料庫位置");

        settingTotalTourDaysSpinnerModel = new SpinnerNumberModel();
        settingTotalTourDaysSpinner.setModel(settingTotalTourDaysSpinnerModel);

        settingTravelAgencyComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                settingTravelAgencyComboBoxItemStateChanged(evt);
            }
        });

        settingDBButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder_open.png"))); // NOI18N
        settingDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingDBButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel25)
                    .addComponent(jLabel40))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingTravelAgencyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(settingTotalTourDaysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(settingDBPathText, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingDBPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingTravelAgencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingTotalTourDaysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("一般", jPanel2);

        jLabel32.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel32.setText("文件解析模式");

        jLabel35.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel35.setText("大頭照檔名");

        settingResolveModeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "新", "舊" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(settingResolveModeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(364, 364, 364))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(settingHeadShotNameText)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingResolveModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingHeadShotNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("資料解析", jPanel4);

        jLabel36.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel36.setText("API地址");

        jLabel37.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel37.setText("編號地址");

        jLabel38.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel38.setText("承辦人");

        jLabel39.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel39.setText("Email");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel36)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingInsuranceEmailText, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(settingInsuranceAPIAddressText)
                    .addComponent(settingInsuranceNoAddressText)
                    .addComponent(settingInsuranceNameText, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingInsuranceAPIAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingInsuranceNoAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingInsuranceNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingInsuranceEmailText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("保險申請", jPanel3);

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2)
                .addGap(0, 0, 0))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2)
                .addGap(0, 0, 0))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CNHKMOTool-v1.4.6");
        setLocationByPlatform(true);
        setResizable(false);

        bottomPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        jLabel2.setText("狀態：");

        statusLabel.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        statusLabel.setText("正常。");

        jLabel9.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        jLabel9.setText("資料庫狀態：");

        dbStatusLabel.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        dbStatusLabel.setText("0");

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(191, 191, 191)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(statusLabel)
                    .addComponent(jLabel9)
                    .addComponent(dbStatusLabel))
                .addContainerGap())
        );

        treePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        applyDataTree.setModel(applyDataTreeModel);
        applyDataTree.setCellRenderer(new ApplyDataTreeCellRender());
        applyDataTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        applyDataTree.setName(""); // NOI18N
        applyDataTree.setRootVisible(false);
        applyDataTree.setRowHeight(20);
        applyDataTree.setShowsRootHandles(true);
        applyDataTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                applyDataTreeMouseReleased(evt);
            }
        });
        applyDataTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                applyDataTreeValueChanged(evt);
            }
        });
        applyDataTreeScrollPane.setViewportView(applyDataTree);

        jLabel8.setText("總筆數：");

        applyDataCountLabel.setText("0");

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, treePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(applyDataTreeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(treePanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyDataCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(applyDataTreeScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(applyDataCountLabel))
                .addContainerGap())
        );

        mainPanel.setLayout(new java.awt.CardLayout());
        mainCards = (CardLayout)(mainPanel.getLayout());

        javax.swing.GroupLayout loadingPanelLayout = new javax.swing.GroupLayout(loadingPanel);
        loadingPanel.setLayout(loadingPanelLayout);
        loadingPanelLayout.setHorizontalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
        );
        loadingPanelLayout.setVerticalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        mainPanel.add(loadingPanel, "loadingCard");

        applyDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        applyDataPanel.setEnabled(false);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("資料"));

        jLabel4.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel4.setText("行程名稱");

        jLabel3.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel3.setText("資料位置");

        folderPath.setEditable(false);

        applyDocPath.setEnabled(false);

        javax.swing.GroupLayout applyDocPanelLayout = new javax.swing.GroupLayout(applyDocPanel);
        applyDocPanel.setLayout(applyDocPanelLayout);
        applyDocPanelLayout.setHorizontalGroup(
            applyDocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(applyDocPath, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );
        applyDocPanelLayout.setVerticalGroup(
            applyDocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, applyDocPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(applyDocPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        docDnDListener = new DocDataDragDropListener();
        docDropTarget = new DropTarget(applyDocPath, docDnDListener);
        docDropTarget.setActive(false);

        selectApplyDocBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectApplyDocBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_edit_16x.png"))); // NOI18N
        selectApplyDocBtn.setToolTipText("重新選擇文件");
        selectApplyDocBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectApplyDocBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel1.setText("申請文件");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "緊急聯絡人", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("新細明體", 0, 13))); // NOI18N

        jLabel5.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel5.setText("姓名");

        jLabel13.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel13.setText("性別");

        jLabel14.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel14.setText("關係");

        jLabel15.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel15.setText("手機");

        jLabel16.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel16.setText("電話");

        jLabel17.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel17.setText("地址");

        contactGenderComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        contactGenderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "男", "女" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contactMobileNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contactNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contactTelNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contactTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contactGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contactAddressText)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactMobileNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactTelNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel29.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel29.setText("入境日期");

        jLabel30.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel30.setText("出境日期");

        tgTourEndDateText.setToolTipText("出境日期會根據入境日期及旅遊天數計算出來");
        tgTourEndDateText.setEnabled(false);

        applyDataSaveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_accept.png"))); // NOI18N
        applyDataSaveBtn.setToolTipText("儲存變更");
        applyDataSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyDataSaveBtnActionPerformed(evt);
            }
        });

        tgTourStartDatePicker.setFormats(new SimpleDateFormat("yyyyMMdd"));
        tgTourStartDatePicker.getEditor().setEditable(false);
        tgTourStartDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tgTourStartDatePickerPropertyChange(evt);
            }
        });
        ((JButton)tgTourStartDatePicker.getComponent(1)).setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/calendar_day.png")));

        jLabel33.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel33.setText("旅行社");

        jLabel34.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel34.setText("旅遊天數");

        tgTravelAgencyText.setEnabled(false);

        tgTotalTourDaysText.setEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addComponent(jLabel1)
                            .addComponent(jLabel29)
                            .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tgTourStartDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(tgTravelAgencyText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel34)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tgTotalTourDaysText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tgTourEndDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(tourNameText)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(applyDocPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addComponent(selectApplyDocBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(folderPath))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyDataSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tourNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectApplyDocBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyDocPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tgTourEndDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tgTourStartDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tgTravelAgencyText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tgTotalTourDaysText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(applyDataSaveBtn)
                .addContainerGap())
        );

        applyErrMsg.setEditable(false);
        applyErrMsg.setColumns(20);
        applyErrMsg.setRows(5);
        jScrollPane5.setViewportView(applyErrMsg);

        javax.swing.GroupLayout applyDataPanelLayout = new javax.swing.GroupLayout(applyDataPanel);
        applyDataPanel.setLayout(applyDataPanelLayout);
        applyDataPanelLayout.setHorizontalGroup(
            applyDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, applyDataPanelLayout.createSequentialGroup()
                .addGroup(applyDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(applyDataPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(applyDataPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane5)))
                .addGap(5, 5, 5))
        );
        applyDataPanelLayout.setVerticalGroup(
            applyDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applyDataPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        mainPanel.add(applyDataPanel, "applyDataCard");

        travellerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel41.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel41.setText("團號");

        jLabel28.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel28.setText("申請資格");

        jLabel7.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel7.setText("中文姓名");

        jLabel12.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel12.setText("英文姓名");

        jLabel20.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel20.setText("身份證號");

        jLabel11.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel11.setText("出生年月日");

        jLabel18.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel18.setText("通行證號");

        jLabel19.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel19.setText("通行證有效期");

        jLabel10.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel10.setText("性別");

        jLabel21.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel21.setText("教育程度");

        jLabel24.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel24.setText("職業");

        jLabel23.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel23.setText("居住地");

        jLabel22.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel22.setText("出生地");

        jLabel26.setText("省(市)");

        jLabel27.setText("縣(市)");

        trChineseNameText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trBirthDateText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trEnglishNameText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trPassportNoText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trPassportExpiryDateText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trPersonIdText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trOccupationDescText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trAddressText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        travellerSaveBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        travellerSaveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_accept.png"))); // NOI18N
        travellerSaveBtn.setToolTipText("儲存變更");
        travellerSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                travellerSaveBtnActionPerformed(evt);
            }
        });

        trGenderComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trGenderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "男", "女" }));

        trEducationComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trEducationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "博士", "碩士", "大學", "專科", "五專", "高中", "國中", "國小", "無" }));

        trLivingCityComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trLivingCityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "北京", "上海", "廈門", "天津", "重慶", "南京", "廣州", "杭州", "成都", "濟南", "西安", "福州", "深圳" }));

        trApplyQualificationComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trApplyQualificationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "年滿20歲且有相當新臺幣20萬以上存款(1)", "年滿20歲且有大陸地區銀行核發之金卡證明(2)", "年滿20歲且年工資所得相當新臺幣50萬元以上(3)", "年滿18歲以上在學學生者(4)", "年滿20歲於三年內曾附財力證明獲准來臺自由行,且無違規情事(5)" }));

        trOccupationComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trOccupationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "軍", "公", "教", "私", "商", "農", "工", "醫", "宗", "演", "新聞", "漁", "輪", "學", "自", "其他", "無", "警" }));

        trBirthPlace1ComboBox.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trBirthPlace1ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "請選擇", "台北", "高雄", "廣州", "上海", "南京", "漢口", "重慶", "青島", "天津", "北京", "西安", "大連", "瀋陽", "哈爾濱", "台灣", "福建", "廣東", "廣西", "雲南", "貴州", "海南", "江蘇", "浙江", "安徽", "江西", "湖南", "湖北", "四川", "山東", "山西", "河南", "河北", "陜西", "甘肅", "遼寧", "遼北", "安東", "吉林", "松江", "合江", "嫩江", "黑龍江", "興安", "熱河", "察哈爾", "綏遠", "寧夏", "蒙古", "新疆", "青海", "西康", "西藏" }));

        trBirthPlace2Text.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trRelativePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("隨行親友"));

        trRelativeLabel.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trRelativeLabel.setText("姓名");

        trRelativeText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trRelativeTitleText.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N

        trRelativeTitleLabel.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        trRelativeTitleLabel.setText("稱謂");

        javax.swing.GroupLayout trRelativePanelLayout = new javax.swing.GroupLayout(trRelativePanel);
        trRelativePanel.setLayout(trRelativePanelLayout);
        trRelativePanelLayout.setHorizontalGroup(
            trRelativePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trRelativePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trRelativeLabel)
                .addGap(12, 12, 12)
                .addComponent(trRelativeText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(trRelativeTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(trRelativeTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        trRelativePanelLayout.setVerticalGroup(
            trRelativePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trRelativePanelLayout.createSequentialGroup()
                .addGroup(trRelativePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(trRelativePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(trRelativeTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trRelativeTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(trRelativePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(trRelativeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trRelativeText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout travellerDetailPanelLayout = new javax.swing.GroupLayout(travellerDetailPanel);
        travellerDetailPanel.setLayout(travellerDetailPanelLayout);
        travellerDetailPanelLayout.setHorizontalGroup(
            travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(trPersonIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(trChineseNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11))
                            .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(travellerSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(trRelativePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, travellerDetailPanelLayout.createSequentialGroup()
                                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel24))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(trGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(trPassportNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel19)
                                                            .addComponent(jLabel21)))
                                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                                        .addGap(178, 178, 178)
                                                        .addComponent(jLabel12)))
                                                .addGap(14, 14, 14)
                                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(trBirthDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(trEnglishNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(trPassportExpiryDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(trEducationComboBox, 0, 160, Short.MAX_VALUE)))
                                            .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                                .addComponent(trOccupationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(trOccupationDescText))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, travellerDetailPanelLayout.createSequentialGroup()
                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                        .addComponent(trLivingCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(trBirthPlace1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel26)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                                        .addComponent(trBirthPlace2Text)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel27))
                                    .addComponent(trAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trGroupNameText)
                            .addComponent(trApplyQualificationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        travellerDetailPanelLayout.setVerticalGroup(
            travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(travellerDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trGroupNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trApplyQualificationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trChineseNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trEnglishNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trPersonIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trBirthDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trPassportNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trPassportExpiryDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trEducationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(trOccupationDescText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trOccupationComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trLivingCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(travellerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trBirthPlace2Text, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trBirthPlace1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(trRelativePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(travellerSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("資料", travellerDetailPanel);

        attachListModel = new DefaultListModel();
        attachJList.setModel(attachListModel);
        attachJList.setToolTipText("");
        attachJList.setCellRenderer(new AttachCellRenderer());
        attachScrollPane.setViewportView(attachJList);
        attachDnDListener = new AttachDataDragDropListener();
        attachDropTarget = new DropTarget(attachJList, attachDnDListener);
        attachDropTarget.setActive(false);

        jLabel6.setText("附件數：");

        attachCountLabel.setText("0");

        imageCheckBox.setSelected(true);
        imageCheckBox.setText("顯示圖片");
        imageCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageCheckBoxMouseClicked(evt);
            }
        });

        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);
        jToolBar2.setEnabled(false);

        resetHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        resetHeadShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/portrait_delete.png"))); // NOI18N
        resetHeadShot.setToolTipText("重設大頭照");
        resetHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHeadShotActionPerformed(evt);
            }
        });
        jToolBar2.add(resetHeadShot);

        setToHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        setToHeadShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/portrait2.png"))); // NOI18N
        setToHeadShot.setToolTipText("設為大頭照");
        setToHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToHeadShotActionPerformed(evt);
            }
        });
        jToolBar2.add(setToHeadShot);

        jToolBar6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar6.setRollover(true);
        jToolBar6.setEnabled(false);

        selectAttachBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectAttachBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_landscape_add2.png"))); // NOI18N
        selectAttachBtn.setToolTipText("新增附件");
        selectAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAttachBtnActionPerformed(evt);
            }
        });
        jToolBar6.add(selectAttachBtn);

        removeAllAttachBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash_canfull.png"))); // NOI18N
        removeAllAttachBtn.setToolTipText("全部移除");
        removeAllAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllAttachBtnActionPerformed(evt);
            }
        });
        jToolBar6.add(removeAllAttachBtn);

        removeAttachBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        removeAttachBtn.setToolTipText("移除");
        removeAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttachBtnActionPerformed(evt);
            }
        });
        jToolBar6.add(removeAttachBtn);

        javax.swing.GroupLayout attachFilePanelLayout = new javax.swing.GroupLayout(attachFilePanel);
        attachFilePanel.setLayout(attachFilePanelLayout);
        attachFilePanelLayout.setHorizontalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attachScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachCountLabel))
                    .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToolBar6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(imageCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        attachFilePanelLayout.setVerticalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attachScrollPane)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jToolBar6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imageCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(attachCountLabel))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("附件", attachFilePanel);

        selectRestAttachBtn.setText("選擇附件");
        selectRestAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRestAttachBtnActionPerformed(evt);
            }
        });

        restApplyAttachListModel = new DefaultListModel();
        restApplyAttachList.setModel(restApplyAttachListModel);
        restApplyAttachList.setCellRenderer(new RestApplyAttachCellRenderer());
        jScrollPane2.setViewportView(restApplyAttachList);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectRestAttachBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectRestAttachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("未配對附件", jPanel5);

        travellerErrMsg.setEditable(false);
        travellerErrMsg.setColumns(20);
        travellerErrMsg.setRows(5);
        jScrollPane7.setViewportView(travellerErrMsg);

        javax.swing.GroupLayout travellerPanelLayout = new javax.swing.GroupLayout(travellerPanel);
        travellerPanel.setLayout(travellerPanelLayout);
        travellerPanelLayout.setHorizontalGroup(
            travellerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(travellerPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(travellerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jScrollPane7))
                .addGap(5, 5, 5))
        );
        travellerPanelLayout.setVerticalGroup(
            travellerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(travellerPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        mainPanel.add(travellerPanel, "travellerCard");

        topPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jToolBar1.setRollover(true);
        jToolBar1.setEnabled(false);

        batchSelectFolderBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        batchSelectFolderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder_open_add2.png"))); // NOI18N
        batchSelectFolderBtn.setToolTipText("批次新增，請選則包含數筆資料的資料夾。");
        batchSelectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchSelectFolderBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(batchSelectFolderBtn);

        selectFolderBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectFolderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/note2_add.png"))); // NOI18N
        selectFolderBtn.setToolTipText("單筆新增，請選擇單筆資料的資料夾。");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(selectFolderBtn);

        refreshTreeBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        refreshTreeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh1.png"))); // NOI18N
        refreshTreeBtn.setToolTipText("重新整理，刷新列表。");
        refreshTreeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTreeBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshTreeBtn);

        removeApplyDataBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        removeApplyDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        removeApplyDataBtn.setToolTipText("移除，移除選擇的資料。");
        removeApplyDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeApplyDataBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(removeApplyDataBtn);

        clearAllBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gnome_edit_clear.png"))); // NOI18N
        clearAllBtn.setToolTipText("全部清空，清空所有資料，變回乾淨狀態。");
        clearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(clearAllBtn);

        reResolveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_refresh.png"))); // NOI18N
        reResolveButton.setToolTipText("重新解析，將選擇的項目以不同的模式重新解析文件");
        reResolveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reResolveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(reResolveButton);

        jToolBar3.setRollover(true);
        jToolBar3.setEnabled(false);

        submit.setFont(new java.awt.Font("新細明體", 0, 16)); // NOI18N
        submit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_save.png"))); // NOI18N
        submit.setToolTipText("資料儲存，將資料存進資料庫。");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });
        jToolBar3.add(submit);

        insuranceApply.setFont(new java.awt.Font("新細明體", 0, 16)); // NOI18N
        insuranceApply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list_go.png"))); // NOI18N
        insuranceApply.setToolTipText("保險申請");
        insuranceApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insuranceApplyActionPerformed(evt);
            }
        });
        jToolBar3.add(insuranceApply);

        jToolBar4.setRollover(true);
        jToolBar4.setEnabled(false);

        createLinkBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/database_connect.png"))); // NOI18N
        createLinkBtn.setToolTipText("連結資料庫");
        createLinkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createLinkBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(createLinkBtn);

        closeLinkBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disconnect.png"))); // NOI18N
        closeLinkBtn.setToolTipText("關閉資料庫");
        closeLinkBtn.setEnabled(false);
        closeLinkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeLinkBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(closeLinkBtn);

        cleanBDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/database_delete.png"))); // NOI18N
        cleanBDButton.setToolTipText("清空資料庫");
        cleanBDButton.setEnabled(false);
        cleanBDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanBDButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(cleanBDButton);

        jToolBar5.setRollover(true);
        jToolBar5.setEnabled(false);

        showGuideBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help_contents.png"))); // NOI18N
        showGuideBtn.setToolTipText("操作說明");
        showGuideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGuideBtnActionPerformed(evt);
            }
        });
        jToolBar5.add(showGuideBtn);

        settingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cogs_icon.png"))); // NOI18N
        settingButton.setToolTipText("設定");
        settingButton.setBorderPainted(false);
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(settingButton);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(treePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(treePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        mainCards.show(mainPanel, "loadingCard");
        setAllAreaEnabled(false);
        SwingWorker smworker = new SubmitWorker();
        smworker.execute();
    }//GEN-LAST:event_submitActionPerformed

    private void selectApplyDocBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectApplyDocBtnActionPerformed
        if (!(selectedNode instanceof ApplyDataNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[selectApplyDocBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        myFileChooser.resetChoosableFileFilters();
        myFileChooser.setDialogTitle("請選擇申請資料");
        myFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        myFileChooser.setMultiSelectionEnabled(false);
        FileFilter ff = new ExtensionFileFilter("Microsoft Word file(2003以上版本)", new String[]{"DOC", "DOCX"});
        myFileChooser.setFileFilter(ff);
        int status = myFileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            addDoc(myFileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_selectApplyDocBtnActionPerformed

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        myFileChooser.resetChoosableFileFilters();
        myFileChooser.setDialogTitle("請選擇資料夾");
        myFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        myFileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[]{});
        myFileChooser.setFileFilter(ff);
        int status = myFileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = myFileChooser.getSelectedFiles();
            initMainArea(); //@modify
            setAllAreaEnabled(false);
            statusLabel.setText("讀取中...");
            SwingWorker fworker = new FolderWorker(files);
            fworker.execute();
        }
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void showGuideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGuideBtnActionPerformed
        JOptionPane.showMessageDialog(null, guidePanel, "操作說明", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_showGuideBtnActionPerformed

    private void clearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBtnActionPerformed
        initAllArea();
    }//GEN-LAST:event_clearAllBtnActionPerformed

    private void resetHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetHeadShotActionPerformed
        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[resetHeadShotAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        if (attachJList.getModel().getSize() <= 0) { return; }
        
        Traveller tr = (Traveller) selectedNode.getUserObject();
        tr.resetHeadShot();
        loadTravellerData(tr);
    }//GEN-LAST:event_resetHeadShotActionPerformed

    private void setToHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToHeadShotActionPerformed
        if (attachJList.getSelectedIndices().length == 0) {
            showMessage("請選擇照片。", "warning");
            return;
        } else if (attachJList.getSelectedIndices().length > 1) {
            showMessage("大頭照只能選擇一張。", "warning");
            return;
        }

        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[setToHeadShotAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        Traveller tr = (Traveller) selectedNode.getUserObject();
        tr.resetHeadShot();
        
        Attach attach = (Attach) attachJList.getSelectedValue();
        attach.setType("1");

        loadTravellerData(tr);
    }//GEN-LAST:event_setToHeadShotActionPerformed

    private void removeAllAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllAttachBtnActionPerformed
        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[removeAllAttachBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        Traveller tr = (Traveller) selectedNode.getUserObject();
        tr.setAttachList(new ArrayList<Attach>());
        loadTravellerData(tr);
    }//GEN-LAST:event_removeAllAttachBtnActionPerformed

    private void removeAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttachBtnActionPerformed
        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[removeAttachBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        if (attachJList.getSelectedIndices().length == 0) { return; }
        Traveller tr = (Traveller) selectedNode.getUserObject();
        tr.removeAttachs(attachJList.getSelectedValuesList());
        loadTravellerData(tr);
    }//GEN-LAST:event_removeAttachBtnActionPerformed

    private void selectAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAttachBtnActionPerformed
        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[selectAttachBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        myFileChooser.resetChoosableFileFilters();
        myFileChooser.setDialogTitle("請選擇附件");
        myFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        myFileChooser.setMultiSelectionEnabled(true);
//        FileFilter ff = new ExtensionFileFilter("圖片或資料夾(jpg, jpeg, png)", new String[] {});
//        myFileChooser.setFileFilter(ff);
        int status = myFileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = myFileChooser.getSelectedFiles();
            addAttach(Arrays.asList(files));
        }
    }//GEN-LAST:event_selectAttachBtnActionPerformed

    private void imageCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageCheckBoxMouseClicked
        attachJList.updateUI();
    }//GEN-LAST:event_imageCheckBoxMouseClicked

    private void batchSelectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchSelectFolderBtnActionPerformed
        myFileChooser.resetChoosableFileFilters();
        myFileChooser.setDialogTitle("請選擇資料夾");
        myFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        myFileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[]{});
        myFileChooser.setFileFilter(ff);
        int status = myFileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            initMainArea();
            File[] files = myFileChooser.getSelectedFiles();
            setAllAreaEnabled(false);
            statusLabel.setText("讀取中...");
            SwingWorker rfworker = new RootFolderWorker(files);
            rfworker.execute();
        }
    }//GEN-LAST:event_batchSelectFolderBtnActionPerformed

    private void createLinkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createLinkBtnActionPerformed
        createLink();
    }//GEN-LAST:event_createLinkBtnActionPerformed

    private void closeLinkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeLinkBtnActionPerformed
        try {
            if (!this.conn.isClosed()) {
                DriverManager.getConnection("jdbc:derby:" + this.config.getDBPath() + ";shutdown=true");
                this.conn.close();
            }
        } catch (SQLException e) {
            if (e.getSQLState().equals("08006")) {    //08006代表關閉特定資料庫
                createLinkBtn.setEnabled(true);
                closeLinkBtn.setEnabled(false);
                submit.setEnabled(false);
                cleanBDButton.setEnabled(false);
                dbStatusLabel.setText("離線。");
            }else{
                showMessage("資料庫關閉失敗，請確認資料庫位置是否正確。", "warning");
            }
        } catch(Exception e){
        }
    }//GEN-LAST:event_closeLinkBtnActionPerformed

    private void removeApplyDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeApplyDataBtnActionPerformed
        removeApplyData();
    }//GEN-LAST:event_removeApplyDataBtnActionPerformed

    private void refreshTreeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTreeBtnActionPerformed
        refreshTree();
    }//GEN-LAST:event_refreshTreeBtnActionPerformed

    private void applyDataTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_applyDataTreeValueChanged
        selectedNode = (DefaultMutableTreeNode) applyDataTree.getLastSelectedPathComponent();
        if (selectedNode instanceof ApplyDataNode) {
            ApplyData applyData = (ApplyData) selectedNode.getUserObject();
            loadApplyData(applyData);
        } else if (selectedNode instanceof TravellerNode) {
            Traveller traveller = (Traveller) selectedNode.getUserObject();
            loadTravellerData(traveller);
        }
    }//GEN-LAST:event_applyDataTreeValueChanged

    private void applyDataTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyDataTreeMouseReleased
        if (rootNode.getChildCount() == 0) {
            return;
        }
        if (evt.isPopupTrigger()) {
            int x = evt.getX();
            int y = evt.getY();
            TreePath path = applyDataTree.getPathForLocation(x, y);

            if (path == null) {
                return;
            }
            
            setPopupMenuEnabled(false);
            setPopupMenuVisible(false);
            setCommonPopupMenuEnabled(true);
            setCommonPopupMenuVisible(true);
            removejMenuItem.setVisible(true);
            removejMenuItem.setEnabled(true);
            TreePath[] paths = applyDataTree.getSelectionPaths();
            if(paths != null && paths.length > 1){
                for (TreePath tp : paths) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    if (node instanceof ApplyDataNode) {
                        reResolveMenuItem.setVisible(true);
                        reResolveMenuItem.setEnabled(true);
                        break;
                    }
                }
            }else{
                applyDataTree.setSelectionPath(path);
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                if (node instanceof ApplyDataNode) {
                    ApplyData ad = (ApplyData)node.getUserObject();
                    reResolveMenuItem.setVisible(true);
                    addTravellerjMenuItem.setVisible(true);
                    if(ad.getStatus() != 1 ){
                        reResolveMenuItem.setEnabled(true);
                        addTravellerjMenuItem.setEnabled(true);
                    }
                } else if (node instanceof TravellerNode) {
                    Traveller tr = (Traveller)node.getUserObject();
                    ApplyData ad = (ApplyData)((DefaultMutableTreeNode)node.getParent()).getUserObject();
                    asMainMenuItem.setVisible(true);
                    addTravellerjMenuItem.setVisible(true);
                    if(ad.getStatus() != 1 ){
                        if( tr.getSeqNo() != 0 ){ asMainMenuItem.setEnabled(true); }
                        addTravellerjMenuItem.setEnabled(true);
                    }
                }
            }
            treejPopupMenu.show(applyDataTree, x, y);
        }
    }//GEN-LAST:event_applyDataTreeMouseReleased

    private void expandAlljMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandAlljMenuItemActionPerformed
        expandTree();
    }//GEN-LAST:event_expandAlljMenuItemActionPerformed

    private void collapseAlljMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseAlljMenuItemActionPerformed
        collapseTree();
    }//GEN-LAST:event_collapseAlljMenuItemActionPerformed

    private void applyDataSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyDataSaveBtnActionPerformed
        if (!(selectedNode instanceof ApplyDataNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[applyDataSaveBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        
        ApplyData ad = (ApplyData) selectedNode.getUserObject();
        TravelGroup tg = ad.getTravelgroup();
        try{
            tg.setTourName(tourNameText.getText());
            tg.setTourStartDate(CommonHelp.getFormatDate(tgTourStartDatePicker.getDate()));
            tg.setContactNameOfMainland(contactNameText.getText());
            tg.setContactTitleOfMainland(contactTitleText.getText());
            tg.setContactGenderOfMainland(contactGenderComboBox.getSelectedItem().toString());
            tg.setContactMobileNoOfMainland(contactMobileNoText.getText());
            tg.setContactTelNoOfMainland(contactTelNoText.getText());
            tg.setContactAddressOfMainland(contactAddressText.getText());
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, String.format("[applyDataSave][TravelGroup] applyDataSave失敗。 path: %s", ad.getApplyFolder().getAbsolutePath()), e);
        }
        loadApplyData(ad);
    }//GEN-LAST:event_applyDataSaveBtnActionPerformed
    
    /**
     * @modify認領附件，
     * @param evt 
     */
    private void selectRestAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRestAttachBtnActionPerformed

        if (restApplyAttachList.getSelectedIndices().length == 0) {
            showMessage("請選擇附件資料夾。", "warning");
            return;
        } else if (restApplyAttachList.getSelectedIndices().length > 1) {
            showMessage("只能選擇一個。", "warning");
            return;
        }

        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[selectRestAttachBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        
        Traveller tr = (Traveller) selectedNode.getUserObject();
        if(!tr.getAttachList().isEmpty()){ return; }
        ApplyAttach aa = (ApplyAttach) restApplyAttachList.getSelectedValue();
        tr.setAttachList(aa.getAttachList());

        aa.setMappingStatus(true);
        
        loadTravellerData(tr);
    }//GEN-LAST:event_selectRestAttachBtnActionPerformed

    private void expandjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandjMenuItemActionPerformed
        if (selectedNode instanceof ApplyDataNode) {
            applyDataTree.expandPath(new TreePath(selectedNode.getPath()));
        } else if (selectedNode instanceof TravellerNode) {
            applyDataTree.expandPath(new TreePath(((DefaultMutableTreeNode) selectedNode.getParent()).getPath()));
        }
    }//GEN-LAST:event_expandjMenuItemActionPerformed

    private void collapsejMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapsejMenuItemActionPerformed
        if (selectedNode instanceof ApplyDataNode) {
            applyDataTree.collapsePath(new TreePath(selectedNode.getPath()));
        } else if (selectedNode instanceof TravellerNode) {
            applyDataTree.collapsePath(new TreePath(((DefaultMutableTreeNode) selectedNode.getParent()).getPath()));
        }
    }//GEN-LAST:event_collapsejMenuItemActionPerformed

    private void removejMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejMenuItemActionPerformed
        removeApplyData();
    }//GEN-LAST:event_removejMenuItemActionPerformed

    private void addTravellerjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTravellerjMenuItemActionPerformed
        ApplyData ad;
        DefaultMutableTreeNode adn;
        if (selectedNode instanceof ApplyDataNode) {
            adn = selectedNode;
            ad = (ApplyData)selectedNode.getUserObject();
        } else if (selectedNode instanceof TravellerNode) {
            adn = (DefaultMutableTreeNode)selectedNode.getParent();
            ad = (ApplyData)adn.getUserObject();
        }else{ return; }
        
        if(ad.getStatus() == 1){
            showMessage("已儲存，不可修改！", "warning");
            return;
        }
        
        Traveller traveller = new Traveller();
        traveller.setSeqNo(ad.getTravelgroup().getTravellerList().size());
        ad.getTravelgroup().getTravellerList().add(traveller);
        
        TravellerNode trn = new TravellerNode();
        trn.setUserObject(traveller);
        applyDataTreeModel.insertNodeInto(trn, adn, adn.getChildCount());
    }//GEN-LAST:event_addTravellerjMenuItemActionPerformed

    /**
     * @modity 未完成
     * @param evt 
     */
    private void asMainMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asMainMenuItemActionPerformed

        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[asMainMenuItemAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        Traveller traveller = (Traveller) selectedNode.getUserObject();
        ApplyData ad = (ApplyData)((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject();
        if(ad.getStatus() == 1){
            showMessage("已儲存，不可修改！", "warning");
            return;
        }
        
        List<Traveller> travellerList = ad.getTravelgroup().getTravellerList();
        int i = 1;
        for(Traveller tr : travellerList){
            if(tr == traveller){
                tr.setSeqNo(0);
                continue;
            }
            tr.setSeqNo(i);
            i++;
        }
        applyDataTree.repaint();
    }//GEN-LAST:event_asMainMenuItemActionPerformed

    private void insuranceApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insuranceApplyActionPerformed
        mainCards.show(mainPanel, "loadingCard");
        setAllAreaEnabled(false);
        SwingWorker insworker = new InsuranceWorker();
        insworker.execute();
    }//GEN-LAST:event_insuranceApplyActionPerformed

    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
        try{
            initSettingArea();

            int n = JOptionPane.showOptionDialog(null,
                    settingPanel,
                    "設定",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null, 
                    new String[]{"儲存", "取消"},
                    "default");

            if (n == JOptionPane.YES_OPTION) {
                this.config.setDBPath(settingDBPathText.getText());
                this.config.setSelAgcIdx(settingTravelAgencyComboBox.getSelectedIndex());
                this.config.setSelAgcTTD((Integer)settingTotalTourDaysSpinner.getValue());
                this.config.setSelModeIdx(settingResolveModeComboBox.getSelectedIndex());
                this.config.setHeadShotName(settingHeadShotNameText.getText());
                this.config.setInsuranceAPIAddress(settingInsuranceAPIAddressText.getText());
                this.config.setInsuranceNoAddress(settingInsuranceNoAddressText.getText());
                this.config.setInsuranceName(settingInsuranceNameText.getText());
                this.config.setInsuranceEmail(settingInsuranceEmailText.getText());
                
                boolean ok = this.config.saveToFile();
                if(ok){
                    statusLabel.setText("設定成功！");
                }else{
                    showMessage("設定失敗！", "warning");
                    statusLabel.setText("設定失敗！");
                }
            }
        } catch (Exception e){
            CommonHelp.logger.log(Level.ERROR, "[settingButtonAction] 設定失敗", e);
        }
    }//GEN-LAST:event_settingButtonActionPerformed

    private void reResolveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reResolveButtonActionPerformed
        reResolveDoc();
    }//GEN-LAST:event_reResolveButtonActionPerformed

    private void tgTourStartDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tgTourStartDatePickerPropertyChange
        if (!(selectedNode instanceof ApplyDataNode)) {
            return;
        }
        
        try{
            ApplyData ad = (ApplyData)selectedNode.getUserObject();
            String sDate = CommonHelp.getFormatDate(tgTourStartDatePicker.getDate());
            if(sDate.trim() == null || sDate.trim().isEmpty()){
                tgTourEndDateText.setText("");
                return;
            }
            int ttd = Integer.valueOf(ad.getTravelgroup().getCnTravelAgency().get("TotalTourDays").toString());
            tgTourEndDateText.setText(CommonHelp.calculateTourDate(sDate, ttd-1));
        }catch(Exception e){tgTourEndDateText.setText("");}
    }//GEN-LAST:event_tgTourStartDatePickerPropertyChange

    private void settingTravelAgencyComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_settingTravelAgencyComboBoxItemStateChanged
        if(evt.getStateChange() == 1){
            int ttd = this.config.getAgcTTDByIdx(settingTravelAgencyComboBox.getSelectedIndex());
            settingTotalTourDaysSpinner.setValue(ttd);
        }
    }//GEN-LAST:event_settingTravelAgencyComboBoxItemStateChanged

    private void settingDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingDBButtonActionPerformed
        myFileChooser.resetChoosableFileFilters();
        myFileChooser.setDialogTitle("請選擇資料庫位置");
        myFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        myFileChooser.setMultiSelectionEnabled(false);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[]{});
        myFileChooser.setFileFilter(ff);
        int status = myFileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File file = myFileChooser.getSelectedFile();
            settingDBPathText.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_settingDBButtonActionPerformed

    private void reResolveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reResolveMenuItemActionPerformed
        this.reResolveDoc();
    }//GEN-LAST:event_reResolveMenuItemActionPerformed

    private void cleanBDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanBDButtonActionPerformed
        Statement st = null;
        try {
            st = conn.createStatement();
            String sql;
            for(String table : this.tableList){
                sql = String.format("delete from %s where true", table);
                System.out.println(sql);
                st.executeUpdate(sql);
            }
        } catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, "[claenBDButtonAction] 失敗。", e);
        } finally{
            if(st != null){
                try{ st.close(); }catch(Exception ignore){}
            }
        }
    }//GEN-LAST:event_cleanBDButtonActionPerformed

    private void travellerSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_travellerSaveBtnActionPerformed
        if (!(selectedNode instanceof TravellerNode)) {
            CommonHelp.logger.log(Level.ERROR, String.format("[travellerSaveBtnAction] 錯誤的selectedNode: %s", selectedNode.getClass()));
            return;
        }
        Traveller tr = (Traveller) selectedNode.getUserObject();
        try{
            tr.setApplyQualification(tr.getApplyQualificationCodeByIdx(trApplyQualificationComboBox.getSelectedIndex()));
            tr.setChineseName(trChineseNameText.getText());
            tr.setEnglishName(trEnglishNameText.getText());
            tr.setBirthDate(trBirthDateText.getText());
            tr.setPersonId(trPersonIdText.getText());
            tr.setPassportNo(trPassportNoText.getText());
            tr.setPassportExpiryDate(trPassportExpiryDateText.getText());
            tr.setGender(trGenderComboBox.getSelectedItem().toString());
            tr.setEducation(trEducationComboBox.getSelectedIndex());
            tr.setOccupation(trOccupationComboBox.getSelectedIndex());
            tr.setOccupationDesc(trOccupationDescText.getText());
            tr.setBirthPlace1(trBirthPlace1ComboBox.getSelectedIndex());
            tr.setBirthPlace2(trBirthPlace2Text.getText());
            tr.setLivingCity(tr.getLivingCityCode(trLivingCityComboBox.getSelectedItem().toString()));
            tr.setAddress(trAddressText.getText());
            tr.setRelative(trRelativeText.getText());
            tr.setRelativeTitle(trRelativeTitleText.getText());
        }catch(Exception e){
            ApplyData ad = (ApplyData)((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject();
            CommonHelp.logger.log(Level.ERROR, String.format("[travellerSave][Traveller][%s] travellerSave失敗。 path: %s", tr.getChineseName(), ad.getApplyFolder().getAbsolutePath()), e);
        }
        applyDataTree.repaint();
        loadTravellerData(tr);
    }//GEN-LAST:event_travellerSaveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*  改變UI的style，Windows風格
                 if ("Nimbus".equals(info.getName())) {
                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
                 break;
                 }
                 */
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            CommonHelp.logger.log(Level.ERROR, "", ex);
        } catch (InstantiationException ex) {
            CommonHelp.logger.log(Level.ERROR, "", ex);
        } catch (IllegalAccessException ex) {
            CommonHelp.logger.log(Level.ERROR, "", ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            CommonHelp.logger.log(Level.ERROR, "", ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CNHKMOGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addTravellerjMenuItem;
    private javax.swing.JLabel applyDataCountLabel;
    private javax.swing.JPanel applyDataPanel;
    private javax.swing.JButton applyDataSaveBtn;
    private javax.swing.JTree applyDataTree;
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel applyDataTreeModel;
    private DefaultMutableTreeNode selectedNode;
    private javax.swing.JScrollPane applyDataTreeScrollPane;
    private javax.swing.JPanel applyDocPanel;
    private javax.swing.JFormattedTextField applyDocPath;
    private DocDataDragDropListener docDnDListener;
    private DropTarget docDropTarget;
    private javax.swing.JTextArea applyErrMsg;
    private javax.swing.JMenuItem asMainMenuItem;
    private javax.swing.JLabel attachCountLabel;
    private javax.swing.JPanel attachFilePanel;
    private javax.swing.JList attachJList;
    private DefaultListModel attachListModel;
    private AttachDataDragDropListener attachDnDListener;
    private DropTarget attachDropTarget;
    private javax.swing.JScrollPane attachScrollPane;
    private javax.swing.JButton batchSelectFolderBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cleanBDButton;
    private javax.swing.JButton clearAllBtn;
    private javax.swing.JButton closeLinkBtn;
    private javax.swing.JMenuItem collapseAlljMenuItem;
    private javax.swing.JMenuItem collapsejMenuItem;
    private javax.swing.JTextField contactAddressText;
    private javax.swing.JComboBox contactGenderComboBox;
    private javax.swing.JTextField contactMobileNoText;
    private javax.swing.JTextField contactNameText;
    private javax.swing.JTextField contactTelNoText;
    private javax.swing.JTextField contactTitleText;
    private javax.swing.JButton createLinkBtn;
    private javax.swing.JLabel dbStatusLabel;
    private javax.swing.JTextArea errMsgContent;
    private javax.swing.JPanel errMsgPanel;
    private javax.swing.JMenuItem expandAlljMenuItem;
    private javax.swing.JMenuItem expandjMenuItem;
    private javax.swing.JTextField folderPath;
    private javax.swing.JTextArea guideContent;
    private javax.swing.JPanel guidePanel;
    private javax.swing.JCheckBox imageCheckBox;
    private javax.swing.JButton insuranceApply;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JPanel loadingPanel;
    private javax.swing.JPanel mainPanel;
    private java.awt.CardLayout mainCards;
    private javax.swing.JFileChooser myFileChooser;
    private javax.swing.JButton reResolveButton;
    private javax.swing.JMenuItem reResolveMenuItem;
    private javax.swing.JButton refreshTreeBtn;
    private javax.swing.JButton removeAllAttachBtn;
    private javax.swing.JButton removeApplyDataBtn;
    private javax.swing.JButton removeAttachBtn;
    private javax.swing.JMenuItem removejMenuItem;
    private javax.swing.JButton resetHeadShot;
    private javax.swing.JList restApplyAttachList;
    private DefaultListModel restApplyAttachListModel;
    private javax.swing.JButton selectApplyDocBtn;
    private javax.swing.JButton selectAttachBtn;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JButton selectRestAttachBtn;
    private javax.swing.JButton setToHeadShot;
    private javax.swing.JButton settingButton;
    private javax.swing.JButton settingDBButton;
    private javax.swing.JTextField settingDBPathText;
    private javax.swing.JTextField settingHeadShotNameText;
    private javax.swing.JTextField settingInsuranceAPIAddressText;
    private javax.swing.JTextField settingInsuranceEmailText;
    private javax.swing.JTextField settingInsuranceNameText;
    private javax.swing.JTextField settingInsuranceNoAddressText;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JComboBox settingResolveModeComboBox;
    private javax.swing.JSpinner settingTotalTourDaysSpinner;
    private javax.swing.SpinnerNumberModel settingTotalTourDaysSpinnerModel;
    private javax.swing.JComboBox settingTravelAgencyComboBox;
    private javax.swing.JButton showGuideBtn;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton submit;
    private javax.swing.JTextField tgTotalTourDaysText;
    private javax.swing.JTextField tgTourEndDateText;
    private org.jdesktop.swingx.JXDatePicker tgTourStartDatePicker;
    private javax.swing.JTextField tgTravelAgencyText;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField tourNameText;
    private javax.swing.JTextField trAddressText;
    private javax.swing.JComboBox trApplyQualificationComboBox;
    private javax.swing.JTextField trBirthDateText;
    private javax.swing.JComboBox trBirthPlace1ComboBox;
    private javax.swing.JTextField trBirthPlace2Text;
    private javax.swing.JTextField trChineseNameText;
    private javax.swing.JComboBox trEducationComboBox;
    private javax.swing.JTextField trEnglishNameText;
    private javax.swing.JComboBox trGenderComboBox;
    private javax.swing.JTextField trGroupNameText;
    private javax.swing.JComboBox trLivingCityComboBox;
    private javax.swing.JComboBox trOccupationComboBox;
    private javax.swing.JTextField trOccupationDescText;
    private javax.swing.JTextField trPassportExpiryDateText;
    private javax.swing.JTextField trPassportNoText;
    private javax.swing.JTextField trPersonIdText;
    private javax.swing.JLabel trRelativeLabel;
    private javax.swing.JPanel trRelativePanel;
    private javax.swing.JTextField trRelativeText;
    private javax.swing.JLabel trRelativeTitleLabel;
    private javax.swing.JTextField trRelativeTitleText;
    private javax.swing.JPanel travellerDetailPanel;
    private javax.swing.JTextArea travellerErrMsg;
    private javax.swing.JPanel travellerPanel;
    private javax.swing.JButton travellerSaveBtn;
    private javax.swing.JPanel treePanel;
    private javax.swing.JPopupMenu treejPopupMenu;
    // End of variables declaration//GEN-END:variables
    
    private Config config;
    private static Connection conn;
//    private static final int IMG_SIZE = 500;
    private final Color borderColor = new Color(255, 102, 51);
    private final Color defSelectedColor = new Color(115,164,209);
    private final Color successColor = java.awt.Color.decode("#3c763d");
    private final Color successBGColor = java.awt.Color.decode("#dff0d8");
    private final Color successBDRColor = java.awt.Color.decode("#d6e9c6");
    private final Color warningColor = java.awt.Color.decode("#8a6d3b");
    private final Color warningBGColor = java.awt.Color.decode("#fcf8e3");
    private final Color warningBDRColor = java.awt.Color.decode("#faebcc");
    private final Color dangerColor = java.awt.Color.decode("#a94442");
    private final Color dangerBGColor = java.awt.Color.decode("#f2dede");
    private final Color dangerBDRColor = java.awt.Color.decode("#ebccd1");
    private final javax.swing.border.Border dashedBorder = BorderFactory.createDashedBorder(borderColor, 3, 3, 1, true);
    private final String[] tableList = {"TRAVELTOURDETAIL", "TRAVELTOUR", "APPLYCASEATTACH", "Traveller", "TravelGroup"};
    private java.io.FileFilter dirFilter = new java.io.FileFilter() {
        @Override
        public boolean accept(File file) {
            return file.isDirectory();
        }
    };
    
    private void initAllArea() {
        mainCards.show(mainPanel, "loadingCard");
        initApplyTree();
        initMainArea();
        allEnableChk();
    }

    private void initApplyTree() {
        rootNode.removeAllChildren();
        applyDataTreeModel.reload();
        applyDataCountLabel.setText("0");
        selectedNode = null;
    }

    private void initMainArea() {
        initApplyDataArea();
        initTravellerDataArea();
    }

    private void initApplyDataArea() {
        tourNameText.setText("");
        folderPath.setText("");
        applyDocPath.setText("");
        tgTourStartDatePicker.setDate(null);
        tgTourEndDateText.setText("");
        contactNameText.setText("");
        contactTitleText.setText("");
        contactGenderComboBox.setSelectedIndex(0);
        contactMobileNoText.setText("");
        contactTelNoText.setText("");
        contactAddressText.setText("");
        applyErrMsg.setText("");
        tgTravelAgencyText.setText("");
        tgTotalTourDaysText.setText("");
    }

    private void initTravellerDataArea(){
        initTravellerDetailArea();
        initTravellerAttachArea();
        travellerErrMsg.setText("");
    }
    
    private void initTravellerDetailArea() {
        trApplyQualificationComboBox.setSelectedIndex(0);
        trChineseNameText.setText("");
        trEnglishNameText.setText("");
        trBirthDateText.setText("");
        trPersonIdText.setText("");
        trPassportNoText.setText("");
        trPassportExpiryDateText.setText("");
        trGenderComboBox.setSelectedIndex(0);
        trEducationComboBox.setSelectedIndex(0);
        trOccupationComboBox.setSelectedIndex(0);
        trOccupationDescText.setText("");
        trLivingCityComboBox.setSelectedIndex(0);
        trAddressText.setText("");
        trRelativeText.setText("");
        trRelativeTitleText.setText("");
    }
    
    private void initTravellerAttachArea(){
        attachListModel.removeAllElements();
        attachCountLabel.setText("0");
        restApplyAttachListModel.removeAllElements();
    }

    private void initSettingArea(){
        settingDBPathText.setText(this.config.getDBPath());
        settingTravelAgencyComboBox.removeAllItems();
        JSONArray agencyList = this.config.getTravelAgencyList();
        for(int i = 0; i < agencyList.size(); i++){
            JSONObject agency = (JSONObject)agencyList.get(i);
            settingTravelAgencyComboBox.addItem(agency.get("Name").toString());
        }
        settingTravelAgencyComboBox.setSelectedIndex(this.config.getSelAgcIdx());
        settingTotalTourDaysSpinner.setValue(this.config.getSelAgcTTD());
        
        settingResolveModeComboBox.setSelectedIndex(this.config.getSelModeIdx());
        settingHeadShotNameText.setText(this.config.getHeadShotName());
        
        settingInsuranceAPIAddressText.setText(this.config.getInsuranceAPIAddress());
        settingInsuranceNoAddressText.setText(this.config.getInsuranceNoAddress());
        settingInsuranceNameText.setText(this.config.getInsuranceName());
        settingInsuranceEmailText.setText(this.config.getInsuranceEmail());
    }
    
    private void createLink() {
        createLink(this.config.getDBPath());
    }

    private void createLink(String Path) {
        try {
            if (this.conn != null && this.conn.isValid(2000)) {
                showMessage("資料庫已連結！", "warning");
                return;
            }
//            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();  //此行用不到
            this.conn = DriverManager.getConnection("jdbc:derby:" + Path);
            dbStatusLabel.setText("連線中。");
            createLinkBtn.setEnabled(false);
            closeLinkBtn.setEnabled(true);
            allEnableChk();

            Statement st = conn.createStatement();
            try {
                st.execute("select * from TravelGroup");
            } catch (SQLException e) {
                CommonHelp.logger.log(Level.FATAL, "Table不存在！", e);
                showMessage("Table不存在！", "err");
            } finally {
                st.close();
            }
        } catch (SQLException e) {
            CommonHelp.logger.log(Level.ERROR, "資料庫連結失敗！", e);
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。", "warning");
        } catch (Exception e) {
            CommonHelp.logger.log(Level.ERROR, "資料庫連結失敗！", e);
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。", "warning");
        }
    }

    /**
     * 將資料載入ApplyDataArea
     * @param applyData 
     */
    private void setApplyDataArea(ApplyData applyData) {
        try {
            initApplyDataArea();
            folderPath.setText(applyData.getApplyFolder().getAbsolutePath());
            applyDocPath.setText(applyData.getApplyDoc() == null ? "" : applyData.getApplyDoc().getAbsolutePath());
            tourNameText.setText(applyData.getTourName());
            TravelGroup tg = applyData.getTravelgroup();
            tgTourStartDatePicker.setDate(CommonHelp.getDateFromString(tg.getTourStartDate()));
//            tgTourEndDateText.setText(tg.getTourEndDate());   //end date 會隨著start date變化而自動改變。
            tgTravelAgencyText.setText(tg.getCnTravelAgency().get("Name").toString());
            tgTotalTourDaysText.setText(tg.getCnTravelAgency().get("TotalTourDays").toString());
            contactAddressText.setText(tg.getContactAddressOfMainland());
            contactGenderComboBox.setSelectedIndex(tg.getContactGenderOfMainland() == null ? 0 : Integer.valueOf(tg.getContactGenderOfMainland()) + 1);
            contactMobileNoText.setText(tg.getContactMobileNoOfMainland());
            contactNameText.setText(tg.getContactNameOfMainland());
            contactTelNoText.setText(tg.getContactTelNoOfMainland());
            contactTitleText.setText(tg.getContactTitleOfMainland());
        } catch (NumberFormatException e) {
            CommonHelp.logger.log(Level.WARN, String.format("[setApplyDataArea] path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
        } catch (Exception e) {
            CommonHelp.logger.log(Level.WARN, String.format("[setApplyDataArea] path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
        }
    }

    /**
     * 更新附件區域。
     */
    private void setAttachJList(Traveller tr) {
        try{
            attachListModel.removeAllElements();
            for (Attach a : tr.getAttachList()) {
                attachListModel.addElement(a);
            }
            attachCountLabel.setText(String.valueOf(attachJList.getModel().getSize()));
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, "[setAttachJList] 錯誤", e);
        }
    }

    private void setRestApplyAttachList(ApplyData applyData) {
        try{
            List<ApplyAttach> laa = applyData.getRestApplyAttachList();
            restApplyAttachListModel.removeAllElements();
            for (ApplyAttach aa : laa) {
                restApplyAttachListModel.addElement(aa);
            }
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, "[setRestApplyAttachList] 錯誤", e);
        }
    }

    private void setTravellerDetail(Traveller tr) {
        try{
            trGroupNameText.setText(tr.getGroupName());
            trApplyQualificationComboBox.setSelectedIndex(tr.getApplyQualificationIdxByCode());
            trAddressText.setText(tr.getAddress());
            trBirthDateText.setText(tr.getBirthDate());
            trChineseNameText.setText(tr.getChineseName());
            trEducationComboBox.setSelectedIndex(tr.getEducation() == null ? 0 : tr.getEducation());
            trEnglishNameText.setText(tr.getEnglishName());
            trGenderComboBox.setSelectedIndex(tr.getGender() == null ? 0 : Integer.valueOf(tr.getGender()) + 1);
            trLivingCityComboBox.setSelectedIndex(tr.getLivingCityIdx() == null ? 0 : tr.getLivingCityIdx() + 1);
            trOccupationComboBox.setSelectedIndex(tr.getOccupation() == null ? 0 : tr.getOccupation());
            trOccupationDescText.setText(tr.getOccupationDesc());
            trBirthPlace1ComboBox.setSelectedIndex(tr.getBirthPlace1() == null ? 0 : tr.getBirthPlace1());
            trBirthPlace2Text.setText(tr.getBirthPlace2());
            trPassportExpiryDateText.setText(tr.getPassportExpiryDate());
            trPassportNoText.setText(tr.getPassportNo());
            trPersonIdText.setText(tr.getPersonId());
            if(tr.getSeqNo() == 0){
                trRelativePanel.setVisible(false);
            }else{
                trRelativePanel.setVisible(true);
                trRelativeText.setText(tr.getRelative());
                trRelativeTitleText.setText(tr.getRelativeTitle());
            }
        }catch(Exception e){
            ApplyData ad = (ApplyData)((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject();
            CommonHelp.logger.log(Level.WARN, String.format("[setTravellerDetail][%s] path: %s", tr.getChineseName(), ad.getApplyFolder().getAbsolutePath()), e);
        }
    }

    private void setErrMsg(ApplyData applyData){
        try{
            applyErrMsg.setText("");
            List<ErrMsg> reml = applyData.getErrMsgOfResolving();
            List<ErrMsg> eml = applyData.getErrMsgList();
            String savingErr = applyData.getSavingErr();
            if(!reml.isEmpty()) {
                for(ErrMsg m : reml) {
                    applyErrMsg.append("[資料解析]" + m.getMsg() + "\n");
                }
                applyData.clearErrMsgOfResolving();
            }
            if(!eml.isEmpty()){
                for(ErrMsg m : eml) {
                    applyErrMsg.append("[資料解析]" + m.getMsg() + "\n");
                }
            }
            if(savingErr != null && !savingErr.isEmpty()){
                applyErrMsg.append("[資料儲存]" + savingErr + "\n");
            }
        } catch (Exception e){
            CommonHelp.logger.log(Level.ERROR, "[setErrMsg][ApplyData] 錯誤", e);
        }
    }
    
    private void setErrMsg(Traveller traveller){
        try{
            travellerErrMsg.setText("");
            List<ErrMsg> eml = traveller.getErrMsgList();
            String insuranceErr = traveller.getInsurance().getErr();
            if(!eml.isEmpty()){
                for(ErrMsg m : eml) {
                    travellerErrMsg.append("[資料解析]" + m.getMsg() + "\n");
                }
            }
            if(insuranceErr != null && !insuranceErr.isEmpty()){
                travellerErrMsg.append("[保險申請]" + insuranceErr + "\n");
            }
        } catch (Exception e) {
            CommonHelp.logger.log(Level.ERROR, "[setErrMsg][Traveller] 錯誤", e);
        }
    }
    
    private void setTreeAreaEnabled(boolean b) {
        applyDataTree.setEnabled(b);
    }

    private void setMainAreaEnabled(boolean b){
        setApplyDataAreaEnabled(b);
        setTravellerDataAreaEnabled(b);
    }
    
    private void setApplyDataAreaEnabled(boolean b) {
        selectApplyDocBtn.setEnabled(b);
        applyDataSaveBtn.setEnabled(b);
        docDropTarget.setActive(b);
    }

    private void setTravellerDataAreaEnabled(boolean b){
        travellerSaveBtn.setEnabled(b);
        setAttachAreaEnabled(b);
    }
    
    private void setAttachAreaEnabled(boolean b) {
        selectAttachBtn.setEnabled(b);
        setToHeadShot.setEnabled(b);
        resetHeadShot.setEnabled(b);
        removeAttachBtn.setEnabled(b);
        removeAllAttachBtn.setEnabled(b);
        attachJList.setEnabled(b);
        attachDropTarget.setActive(b);
        selectRestAttachBtn.setEnabled(b);
    }
    
    private void setTopAreaEnabled(boolean b) {
//        createLinkBtn.setEnabled(b);
//        closeLinkBtn.setEnabled(b);
        batchSelectFolderBtn.setEnabled(b);
        selectFolderBtn.setEnabled(b);
        refreshTreeBtn.setEnabled(b);
        removeApplyDataBtn.setEnabled(b);
        clearAllBtn.setEnabled(b);
        submit.setEnabled(b);
        insuranceApply.setEnabled(b);
        settingButton.setEnabled(b);
        reResolveButton.setEnabled(b);
        cleanBDButton.setEnabled(b);
    }
    
    private void setBottomAreaEnabled(boolean b) {
        createLinkBtn.setEnabled(b);
        closeLinkBtn.setEnabled(b);
    }
    
    private void setAllAreaEnabled(boolean b) {
        setTreeAreaEnabled(b);
        setMainAreaEnabled(b);
        setTopAreaEnabled(b);
        setBottomAreaEnabled(b);
    }
    
    private void setCommonPopupMenuVisible(boolean b){
        expandjMenuItem.setVisible(b);
        expandAlljMenuItem.setVisible(b);
        collapsejMenuItem.setVisible(b);
        collapseAlljMenuItem.setVisible(b);
    }
    
    private void setPopupMenuVisible(boolean b){
        setCommonPopupMenuVisible(b);
        addTravellerjMenuItem.setVisible(b);
        removejMenuItem.setVisible(b);
        reResolveMenuItem.setVisible(b);
        asMainMenuItem.setVisible(b);
    }
    
    private void setCommonPopupMenuEnabled(boolean b){
        expandjMenuItem.setVisible(b);
        expandAlljMenuItem.setVisible(b);
        collapsejMenuItem.setVisible(b);
        collapseAlljMenuItem.setVisible(b);
    }
    
    private void setPopupMenuEnabled(boolean b){
        setCommonPopupMenuEnabled(b);
        addTravellerjMenuItem.setEnabled(b);
        removejMenuItem.setEnabled(b);
        reResolveMenuItem.setEnabled(b);
        asMainMenuItem.setEnabled(b);
    }
    
    /**
     * 確認所有的component是否可被Enable
     */
    private void allEnableChk() {
        setTreeAreaEnabled(true);
        setTopAreaEnabled(true);
        
        if (selectedNode instanceof ApplyDataNode) {
            ApplyData applyData = (ApplyData) selectedNode.getUserObject();
            setMainAreaEnabled(applyData.getStatus() == 1? false : true);
        } else if (selectedNode instanceof TravellerNode) {
            ApplyData applyData = (ApplyData)((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject();
            setMainAreaEnabled(applyData.getStatus() == 1? false : true);
        }

        if (rootNode.getChildCount() > 0) {
            insuranceApply.setEnabled(true);
            reResolveButton.setEnabled(true);
        }else{
            insuranceApply.setEnabled(false);
            reResolveButton.setEnabled(false);
        }
        
        try {
            if (this.conn == null || this.conn.isClosed()) {
                createLinkBtn.setEnabled(true);
                closeLinkBtn.setEnabled(false);
                submit.setEnabled(false);
                cleanBDButton.setEnabled(false);
            } else {
                createLinkBtn.setEnabled(false);
                closeLinkBtn.setEnabled(true);
                cleanBDButton.setEnabled(true);
                if (rootNode.getChildCount() > 0) {
                    submit.setEnabled(true);
                }else{
                    submit.setEnabled(false);
                }
            }
        } catch (SQLException ignore) {}

        applyDataTree.updateUI();
        attachJList.updateUI();
    }
    
    private void showMessage(String msg) {
        showMessage(msg, "info");
    }

    private void showMessage(String msg, String type) {
        if (type.equals("info")) {
            JOptionPane.showMessageDialog(null, msg, "訊息", JOptionPane.INFORMATION_MESSAGE);
        } else if (type.equals("warning")) {
            JOptionPane.showMessageDialog(null, msg, "注意", JOptionPane.WARNING_MESSAGE);
        } else if (type.equals("err")) {
            errMsgContent.setText(msg);
            JOptionPane.showMessageDialog(null, errMsgPanel, "錯誤", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    /**
     * 將一筆申請資料傳入資料庫
     *
     * @param applyData
     * @return 儲存成功return true
     */
    private boolean insertData(ApplyData applyData, String idBase) {
        TravelGroup travelgroup = applyData.getTravelgroup();
        List<Traveller> travellerList = travelgroup.getTravellerList();
        travelgroup.setApplyDate();
        travelgroup.setNiaApplyDate();
        travelgroup.setGroupCount(travellerList.size());
        travelgroup.setPermitApplyCount(travellerList.size());
        
        //自行生出ID
        String travelGroupId = idBase + "tg";
        String travellerId = idBase + "tr";
        String travelTourId = idBase + "tt";
        String travelTourDetailId = idBase + "ttd";

        Statement st = null;
        String insertStr;
        
        try {
            st = conn.createStatement();
            
            travelgroup.setId(travelGroupId);
            insertStr = travelgroup.getInsertStr();
            st.executeUpdate(insertStr);

            for (int i = 0; i < travellerList.size(); i++) {
                Traveller traveller = travellerList.get(i);
                traveller.setId(travellerId + i);
                traveller.setTravelGroupId(travelGroupId);
                insertStr = traveller.getInsertStr();
                st.executeUpdate(insertStr);

                insertStr = "insert into APPLYCASEATTACH(id, TRAVELLERID, version, fileName, attachType, attachFile, CreateDate) "
                        + "values(?, ?, 0, ?, ?, ?, current_timestamp)";
                List<Attach> la = traveller.getAttachList();
                for (int j = 0; j < la.size(); j++) {
//                    File file = imageProcess(la.get(j).getFile());
                    File file = la.get(j).getFile();
                    InputStream fin = new FileInputStream(file);
                    PreparedStatement ps = conn.prepareStatement(insertStr);
                    ps.setString(1, traveller.getId() + "at" + j);
                    ps.setString(2, traveller.getId());
                    ps.setString(3, file.getName());
                    ps.setString(4, la.get(j).getType());
                    ps.setBinaryStream(5, fin);
                    ps.execute();
                    fin.close();
                }
            }
            
            insertStr = String.format(
                    "insert into TRAVELTOUR(id, travelGroupId, version, CreateDate, LastUpdateTime) "
                    + "values('%s', '%s', 0, current_timestamp, current_timestamp)",
                    travelTourId, travelGroupId);
            st.executeUpdate(insertStr);

            int ttd = Integer.valueOf(travelgroup.getCnTravelAgency().get("TotalTourDays").toString());
            
            for (int i = 0; i < ttd; i++) {
                String tourDate = CommonHelp.calculateTourDate(travelgroup.getTourStartDate(), i);
                String tourDescription = i + 1 < ttd ? "台北" : "返程";
                insertStr = String.format(
                        "insert into TRAVELTOURDETAIL(id, travelTourId, version, tourDate, tourDescription, tourIndex) "
                        + "values('%s', '%s', 0, '%s', '%s', %d)",
                        travelTourDetailId + i, travelTourId, tourDate, tourDescription, i);
                st.executeUpdate(insertStr);
            }
            return true;
        } catch (IOException e) {
            CommonHelp.logger.log(Level.ERROR, String.format("[insertData] 失敗。 path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
            applyData.setSavingErr("儲存失敗。" + e.getMessage());
            return false;
        } catch (SQLException e) {
            CommonHelp.logger.log(Level.ERROR, String.format("[insertData] 失敗。 path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
            applyData.setSavingErr("儲存失敗。" + e.getMessage());
            return false;
        } catch (ParseException e) {
            CommonHelp.logger.log(Level.ERROR, String.format("[insertData] 失敗。 path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
            applyData.setSavingErr("儲存失敗。" + e.getMessage());
            return false;
        } catch (Exception e) {
            CommonHelp.logger.log(Level.ERROR, String.format("[insertData] 失敗。 path: %s", applyData.getApplyFolder().getAbsolutePath()), e);
            applyData.setSavingErr("儲存失敗。" + e.getMessage());
            return false;
        } finally{
            if(st != null){
                try{ st.close(); }catch(Exception ignore){}
            }
        }
    }

    private void rollbackData(String id){
        Statement st = null;
        try {
            st = conn.createStatement();
            String sql;
            for(String table : this.tableList){
                sql = String.format("delete from %s where id like '%s%%'", table, id);
                System.out.println(sql);
                st.executeUpdate(sql);
            }
        } catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, "[rollbackData] 失敗。", e);
        } finally{
            if(st != null){
                try{ st.close(); }catch(Exception ignore){}
            }
        }
    }
    
    private void addAttach(List<File> files) {
        Traveller tr = (Traveller) selectedNode.getUserObject();
        tr.addAttach(files);
        loadTravellerData(tr);
    }

    /**
     * 用來手動選擇文件時使用
     * @param file 
     */
    private void addDoc(File file) {
        try{
            String fn = file.getName().toLowerCase();
            if (fn.endsWith(".doc") || fn.endsWith(".docx")) {
                ApplyData ad = (ApplyData) selectedNode.getUserObject();
                ad.setApplyDoc(file);
                mainCards.show(mainPanel, "loadingCard");
                initMainArea();
                setAllAreaEnabled(false);
                statusLabel.setText("讀取中...");
                SwingWorker drsworker = new DocReResolveWorker(ad);
                drsworker.execute();
            }
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, String.format("addDoc失敗。 path: %s", file.getAbsolutePath()), e);
        }
    }

    private void addNode(File f) {
        try{
            ApplyData ad = new ApplyData(f, this.config);
            ad.handleApplyData();
            ApplyDataNode adNode = new ApplyDataNode();
            adNode.setUserObject(ad);
            applyDataTreeModel.insertNodeInto(adNode, rootNode, rootNode.getChildCount());
            setChildNode(adNode);
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, String.format("addNode失敗。 path: %s", f.getAbsolutePath()), e);
        }
    }

    private void setChildNode(ApplyDataNode adNode){
        try{
//            adNode.removeAllChildren();
            ApplyData applyData = (ApplyData) adNode.getUserObject();
            List<Traveller> travellerList = applyData.getTravelgroup().getTravellerList();
            for (Traveller tr : travellerList) {
                TravellerNode trNode = new TravellerNode();
                trNode.setUserObject(tr);
                applyDataTreeModel.insertNodeInto(trNode, adNode, adNode.getChildCount());
            }
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, String.format("setNode失敗。"), e);
        }
    }
    
    private void expandTree() {
        for (int i = 0; i < applyDataTree.getRowCount(); i++) {
            applyDataTree.expandRow(i);
        }
    }

    private void collapseTree() {
        for (int i = 0; i < applyDataTree.getRowCount(); i++) {
            applyDataTree.collapseRow(i);
        }
    }

    private void refreshTree() {
//        if(rootNode.getChildCount() == 0){return;}
        applyDataTreeModel.reload();
        expandTree();
    }

    private void removeApplyData() {
        mainCards.show(mainPanel, "loadingCard");
        try{
            TreePath[] paths = applyDataTree.getSelectionPaths();
            if(paths == null){return;}
            for (TreePath tp : paths) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                if (node instanceof TravellerNode) {
                    ApplyData ad = (ApplyData)((DefaultMutableTreeNode)node.getParent()).getUserObject();
                    ad.getTravelgroup().removeTraveller((Traveller)node.getUserObject());
                    ad.getTravelgroup().resetSeqNo();
                }
                applyDataTreeModel.removeNodeFromParent(node);
            }
            initMainArea();
            selectedNode = null;
        }catch(Exception e){
            CommonHelp.logger.log(Level.ERROR, "removeApplyData失敗。", e);
        }
    }

    private void loadApplyData(ApplyData applyData){
        mainCards.show(mainPanel, "loadingCard");
        setAllAreaEnabled(false);
        statusLabel.setText("讀取中...");
        SwingWorker sadlworker = new ApplyDataLoadWorker(applyData);
        sadlworker.execute();
    }
    
    private void loadTravellerData(Traveller traveller){
        mainCards.show(mainPanel, "loadingCard");
        setAllAreaEnabled(false);
        statusLabel.setText("讀取中...");
        SwingWorker trdlworker = new TravellerDataLoadWorker(traveller);
        trdlworker.execute();
    }

    private void reResolveDoc(){
        mainCards.show(mainPanel, "loadingCard");
        statusLabel.setText("解析中...");
        setAllAreaEnabled(false);
        BatchDocReResolveWork bdrrworker = new BatchDocReResolveWork();
        bdrrworker.execute();
    }
    
    class ExtensionFileFilter extends FileFilter {

        String description;
        String extensions[];

        public ExtensionFileFilter(String description, String extension) {
            this(description, new String[]{extension});
        }

        public ExtensionFileFilter(String description, String extensions[]) {
            if (description == null) {
                this.description = extensions[0];
            } else {
                this.description = description;
            }
            this.extensions = (String[]) extensions.clone();
            toLower(this.extensions);
        }

        private void toLower(String array[]) {
            for (int i = 0, n = array.length; i < n; i++) {
                array[i] = array[i].toLowerCase();
            }
        }

        public String getDescription() {
            return description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            } else {
                String path = file.getAbsolutePath().toLowerCase();
                for (int i = 0, n = extensions.length; i < n; i++) {
                    String extension = extensions[i];
                    if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    /**
     * 附件的cellrender
     */
    private class AttachCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            if (value instanceof Attach) {
                Attach attach = (Attach) value;
                if (attach.getType().equals("1")) {
                    setText("[大頭照] " + attach.getFile().getName());
                } else {
                    setText(attach.getFile().getName());
                }

                //根據使用者是否勾選顯示圖片來決定圖示的顯示方式
                if (imageCheckBox.isSelected()) {
                    setIcon(attach.getImageIcon());
                } else {
                    setIcon(FileSystemView.getFileSystemView().getSystemIcon(attach.getFile()));
                }

                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }

    /**
     * 待認領附件的cellrender
     */
    private class RestApplyAttachCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            if (value instanceof ApplyAttach) {
                ApplyAttach aa = (ApplyAttach) value;
                setText(aa.getBelongTo());
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }

    /**
     * 樹的cellrender
     */
    private class ApplyDataTreeCellRender extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(
                JTree tree,
                Object value,
                boolean selected,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            String colorType = "", saveStatusStr = "未儲存", insStatusStr = "未申請";
            if (node instanceof ApplyDataNode) {
                ApplyData applyData = (ApplyData) node.getUserObject();
                int saveStatus = applyData.getStatus();
                int insStatus = applyData.getTravelgroup().getInsuranceStatus();
                if (saveStatus == 1) {
                    saveStatusStr = "儲存完成";
                    colorType = "success";
                } else if (saveStatus == 2) {
                    saveStatusStr = "儲存失敗";
                    colorType = "danger";
                } else {
                    int validStatus = applyData.getValidateStatus();
                    if (validStatus == 2) {
                        colorType = "danger";
                    } else if (validStatus == 1){
                        colorType = "warning";
                    } else {
                        colorType = "";
                    }
                }
                if (insStatus == 1) {
                    insStatusStr = "申請成功";
                } else if (insStatus == 2) {
                    insStatusStr = "申請失敗";
                    colorType = "danger";
                } else if(colorType.equals("success")) {
                    colorType = "warning";
                }
                setText(String.format("[%s][%s]%s", saveStatusStr, insStatusStr, applyData.getTourName()));
            } else if (node instanceof TravellerNode) {
                Traveller traveller = (Traveller) node.getUserObject();
                ApplyData applyData = (ApplyData) ((ApplyDataNode) node.getParent()).getUserObject();
                int saveStatus = applyData.getStatus();
                int insStatus = traveller.getInsurance().getStatus();
                setIcon(traveller.getHeadShot());
                String applyType = traveller.getSeqNo() == 0 ? "主" : "隨";
                if (saveStatus == 1) {
                    colorType = "success";
                } else if (saveStatus == 2) {
                    colorType = "danger";
                } else {
                    int validStatus = traveller.getValidateStatus();
                    if (validStatus == 2) {
                        colorType = "danger";
                    } else if(validStatus == 1){
                        colorType = "warning";
                    } else {
                        colorType = "";
                    }
                }
                if (insStatus == 1) {
                    insStatusStr = "申請成功";
                } else if (insStatus == 2) {
                    insStatusStr = "申請失敗";
                    colorType = "danger";
                } else if(colorType.equals("success")) {
                    colorType = "warning";
                }
                
                setText(String.format("[%s][%s]%s", insStatusStr, applyType, traveller.getChineseName()));
            }
            
            switch(colorType){
                case "success":
                    setForeground(successColor);
                    setBackground(selected? successBGColor.darker() : successBGColor);
                    setBorder(javax.swing.BorderFactory.createLineBorder(successBDRColor, 1));
                    break;
                case "warning":
                    setForeground(warningColor);
                    setBackground(selected? warningBGColor.darker() : warningBGColor);
                    setBorder(javax.swing.BorderFactory.createLineBorder(warningBDRColor, 1));
                    break;
                case "danger":
                    setForeground(dangerColor);
                    setBackground(selected? dangerBGColor.darker() : dangerBGColor);
                    setBorder(javax.swing.BorderFactory.createLineBorder(dangerBDRColor, 1));
                    break;
                default:
                    setForeground(selected? Color.WHITE : Color.BLACK);
                    setBackground(selected? defSelectedColor : this.backgroundNonSelectionColor);
                    setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));
                    break;
            }
            
            setOpaque(true);
            setPreferredSize(new Dimension(tree.getWidth(), tree.getRowHeight()));
            return this;
        }
    }

    public class ApplyDataNode extends DefaultMutableTreeNode {
        @Override
        public String toString() {
            ApplyData applyData = (ApplyData) this.userObject;
            return applyData.getTourName();
        }
    }

    public class TravellerNode extends DefaultMutableTreeNode {
        @Override
        public String toString() {
            Traveller traveller = (Traveller) this.userObject;
            return traveller.getChineseName();
        }
    }

    public class MyTreeModelListener implements TreeModelListener {

        public void treeNodesChanged(TreeModelEvent e) {
            refreshTree();
        }

        public void treeNodesInserted(TreeModelEvent e) {
            refreshTree();
        }

        public void treeNodesRemoved(TreeModelEvent e) {
            refreshTree();
        }

        public void treeStructureChanged(TreeModelEvent e) {
        }
    }

    /**
     * 處理批次資料夾選擇的Worker
     */
    public class RootFolderWorker extends SwingWorker<Void, Void> {

        private File[] folderList;

        public RootFolderWorker(File[] fs) {
            this.folderList = fs;
        }

        @Override
        public Void doInBackground() {
            String msg;
            int i = 1;
            for (File folder : folderList) {
                File[] fileList = folder.listFiles(dirFilter);
                int j = 1;
                for (File f : fileList) {
                    msg = String.format("處理中...(資料夾：%d/%d , %d/%d筆)", i, folderList.length, j, fileList.length);
                    statusLabel.setText(msg);
                    addNode(f);
                    j++;
                }
                i++;
            }
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            applyDataCountLabel.setText(String.valueOf(rootNode.getChildCount()));
            allEnableChk();
        }
    }

    /**
     * 選擇單筆資料的Worker
     */
    public class FolderWorker extends SwingWorker<Void, Void> {

        private File[] folderList;

        public FolderWorker(File[] fs) {
            this.folderList = fs;
        }

        @Override
        public Void doInBackground() {
            String msg;
            int i = 1;
            for (File folder : folderList) {
                msg = String.format("處理中...(%d/%d筆)", i, folderList.length);
                statusLabel.setText(msg);
                addNode(folder);
                i++;
            }
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            applyDataCountLabel.setText(String.valueOf(rootNode.getChildCount()));
            allEnableChk();
        }
    }

    /**
     * 載入申請資料的Worker
     */
    public class ApplyDataLoadWorker extends SwingWorker<Void, Void> {

        private ApplyData applyData;

        public ApplyDataLoadWorker(ApplyData ad) {
            this.applyData = ad;
        }

        @Override
        public Void doInBackground() {
            setApplyDataArea(this.applyData);
            setErrMsg(this.applyData);
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            mainCards.show(mainPanel, "applyDataCard");
            allEnableChk();
        }
    }

    /**
     * 載入旅客資料的Worker
     */
    public class TravellerDataLoadWorker extends SwingWorker<Void, Void> {

        private Traveller traveller;
        
        public TravellerDataLoadWorker(Traveller tr){
            this.traveller = tr;
        }
        
        @Override
        public Void doInBackground() {
            initTravellerDataArea();
            setTravellerDetail(this.traveller);
            setAttachJList(this.traveller);
            ApplyData ad = (ApplyData)((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject();
            setRestApplyAttachList(ad);
            setErrMsg(this.traveller);
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("讀取完成");
            mainCards.show(mainPanel, "travellerCard");
            allEnableChk();
        }
    }

    /**
     * 處理找不到文件，使用者重新選擇文件時的Worker
     */
    public class DocReResolveWorker extends SwingWorker<Void, Void> {

        private ApplyData applyData;

        public DocReResolveWorker(ApplyData ad) {
            this.applyData = ad;
        }
        
        @Override
        public Void doInBackground() {
            this.applyData.handleApplyData(true);
            ApplyDataNode adn = (ApplyDataNode)selectedNode;
            adn.removeAllChildren();
            setChildNode(adn);
            TreePath path = new TreePath(adn.getPath());
            applyDataTree.setSelectionPath(path);
            loadApplyData(applyData);
            return null;
        }

        @Override
        protected void done() {
//            applyDataTreeModel.nodeChanged(selectedNode);
            TreePath path = new TreePath(selectedNode.getPath());
            applyDataTree.setSelectionPath(path);
            mainCards.show(mainPanel, "applyDataCard");
            statusLabel.setText("讀取完成");
            allEnableChk();
        }
    }

    /**
     * 重新解析選擇的項目
     */
    public class BatchDocReResolveWork extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() {
            try{
                TreePath[] paths = applyDataTree.getSelectionPaths();
                int i = 0;
                JSONArray modeList = config.getResolveModeList();
                for (TreePath tp : paths) {
                    statusLabel.setText(String.format("處理中...(%d/%d筆)", i, paths.length));
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    if (node instanceof TravellerNode) { continue; }    //子項目跳過
                    ApplyData applyData = (ApplyData)node.getUserObject();
                    if(applyData.getStatus() == 1){ continue; }     //已儲存的跳過
                    int useMode = applyData.getResolveMode();
                    for(int j = 0; j < modeList.size(); j++){
                        if(useMode != j){
                            applyData.setResolveMode(j);
                            break;
                        }
                    }
                    applyData.handleApplyData(true);
                    node.removeAllChildren();
                    setChildNode((ApplyDataNode)node);
                    i++;
                }
                selectedNode = null;
            }catch(Exception e){
                CommonHelp.logger.log(Level.ERROR, "removeApplyData失敗。", e);
            }
            return null;
        }

        @Override
        protected void done() {
            statusLabel.setText("完成");
            allEnableChk();
        }
    }
    
    /**
     * 處理submit的Worker 過濾已完成及不合格的申請資料
     */
    public class SubmitWorker extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() {
            try{
                for (int i = 0; i < rootNode.getChildCount(); i++) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) applyDataTreeModel.getChild(rootNode, i);
                    ApplyData applyData = (ApplyData) node.getUserObject();
                    statusLabel.setText(String.format("處理中...(%d/%d筆)", i + 1, rootNode.getChildCount()));
                    if (applyData.getStatus() == 1 || !applyData.isPass()) {
                        continue;
                    }
                    String idBase = CommonHelp.getNowTimeToSS();  //以毫秒來當底，才不會重複
                    System.out.println();
                    boolean ok = insertData(applyData, idBase);
                    if(!ok){ rollbackData(idBase); }
                    applyData.setStatus(ok? 1 : 2);
                }
            }catch(Exception e){
                CommonHelp.logger.log(Level.ERROR, "[SubmitWorker] 錯誤", e);
            }
            return null;
        }

        @Override
        protected void done() {
            allEnableChk();
            statusLabel.setText("處理完畢");
        }
    }

    /**
     * 處理保單申請的Worker 過濾已申請完成及不及格的申請資料
     */
    public class InsuranceWorker extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() {
            try{
                int no = Insurance.getInsuranceNo(config.getInsuranceNoAddress());
                if(no == -2){
                    showMessage("取得保險申請編號失敗。", "warning");
                    return null;
                }
                for (int i = 0; i < rootNode.getChildCount(); i++) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) applyDataTreeModel.getChild(rootNode, i);
                    ApplyData applyData = (ApplyData) node.getUserObject();
                    statusLabel.setText(String.format("處理中...(%d/%d筆)", i + 1, rootNode.getChildCount()));
                    if (!applyData.isPass()) { continue; }
                    System.out.println("處理: " + applyData.getTourName());
                    TravelGroup tg = applyData.getTravelgroup();
                    for(Traveller tr : tg.getTravellerList()){
                        no += 1;
                        System.out.println("處理: " + tr.getChineseName());
                        Insurance ins = tr.getInsurance();
                        if(ins.getStatus() == 1){ continue; }
                        if(!ins.createXML(tg, tr, no, 15)){
                            ins.setStatus(2);
                            continue;
                        }
                        System.out.println("post...");
                        boolean isOk = ins.postXML(config.getInsuranceAPIAddress());
                        ins.setStatus(isOk? 1 : 2);
                    }
                }
                Insurance.setInsuranceNo(config.getInsuranceNoAddress(), no);
            }catch(Exception e){
                CommonHelp.logger.log(Level.ERROR, "[SubmitWorker] 錯誤", e);
            }
            return null;
        }

        @Override
        protected void done() {
            allEnableChk();
            statusLabel.setText("處理完畢");
        }
    }
    
    public class AttachDataDragDropListener implements DropTargetListener {

        @Override
        public void drop(DropTargetDropEvent event) {
            attachScrollPane.setBorder(null);
            if (!(selectedNode instanceof TravellerNode)) {
                CommonHelp.logger.log(Level.ERROR, String.format("[AttachDataDragDropListener] 錯誤的selectedNode: %s", selectedNode.getClass()));
                return;
            }
            event.acceptDrop(DnDConstants.ACTION_COPY);
            Transferable transferable = event.getTransferable();
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            for (DataFlavor flavor : flavors) {
                try {
                    if (flavor.isFlavorJavaFileListType()) {
                        List<File> files = (List) transferable.getTransferData(flavor);
                        addAttach(files);
                    }
                } catch (Exception e) {
                    CommonHelp.logger.log(Level.ERROR, "[AttachDataDragDropListener] 錯誤", e);
                }
            }
            event.dropComplete(true);
        }

        @Override
        public void dragEnter(DropTargetDragEvent event) {
            attachScrollPane.setBorder(dashedBorder);
        }

        @Override
        public void dragExit(DropTargetEvent event) {
            attachScrollPane.setBorder(null);
        }

        @Override
        public void dragOver(DropTargetDragEvent event) {
        }

        @Override
        public void dropActionChanged(DropTargetDragEvent event) {
        }

    }

    public class DocDataDragDropListener implements DropTargetListener {

        @Override
        public void drop(DropTargetDropEvent event) {
            applyDocPanel.setBorder(null);
            if (!(selectedNode instanceof ApplyDataNode)) {
                CommonHelp.logger.log(Level.ERROR, String.format("[DocDataDragDropListener] 錯誤的selectedNode: %s", selectedNode.getClass()));
                return;
            }
            event.acceptDrop(DnDConstants.ACTION_COPY);
            Transferable transferable = event.getTransferable();
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            for (DataFlavor flavor : flavors) {
                try {
                    if (flavor.isFlavorJavaFileListType()) {
                        List< File> files = (List) transferable.getTransferData(flavor);
                        if (files.size() == 1) {
                            addDoc(files.get(0));
                        }
                    }
                } catch (Exception e) {
                    CommonHelp.logger.log(Level.ERROR, "[DocDataDragDropListener] 錯誤", e);
                }
            }
            event.dropComplete(true);
        }

        @Override
        public void dragEnter(DropTargetDragEvent event) {
            applyDocPanel.setBorder(dashedBorder);
        }

        @Override
        public void dragExit(DropTargetEvent event) {
            applyDocPanel.setBorder(null);
        }

        @Override
        public void dragOver(DropTargetDragEvent event) {
        }

        @Override
        public void dropActionChanged(DropTargetDragEvent event) {
        }

    }

    class ShutdownThread extends Thread {

        private Connection conn;

        ShutdownThread(Connection conn) {
            this.conn = conn;
        }

        public void run() {
            try {
                if (!conn.isClosed()) {
                    this.conn.close();
                }
            } catch (SQLException e) {
            }
        }
    }
}
