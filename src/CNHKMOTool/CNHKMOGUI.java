/*
* CNHKMOTool v1.2.3
*/

package CNHKMOTool;

import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Paragraph;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.hwpf.usermodel.Table;
//import org.apache.poi.hwpf.usermodel.TableCell;
//import org.apache.poi.hwpf.usermodel.TableRow;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
//import org.apache.poi.xwpf.usermodel.XWPFTableCell;
//import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.apache.xmlbeans.impl.piccolo.io.FileFormatException;
import org.imgscalr.Scalr;

import taobe.tec.jcc.JChineseConvertor;
import TravelData.*;

public class CNHKMOGUI extends javax.swing.JFrame {

    public CNHKMOGUI() {
        initComponents();
        initCustomComponents();
        createLink("D:/CNHKMO/db/CNHKMO");
//        createLink("db/CNHKMO");
        Runtime.getRuntime().addShutdownHook(new ShutdownThread(this.conn));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guidePanel = new javax.swing.JPanel();
        jScrollPanel1 = new javax.swing.JScrollPane();
        guideContent = new javax.swing.JTextArea();
        errMsgPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errMsgContent = new javax.swing.JTextArea();
        mainPanel = new javax.swing.JPanel();
        submit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        clientDataPath = new javax.swing.JFormattedTextField();
        selectClientDataBtn = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tourName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        selectFolderBtn = new javax.swing.JButton();
        folderPath = new javax.swing.JTextField();
        attachFilePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attachJList = new javax.swing.JList();
        selectAttachBtn = new javax.swing.JButton();
        removeAttachBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        travellerJList = new javax.swing.JList();
        removeAllAttachBtn = new javax.swing.JButton();
        setToHeadShot = new javax.swing.JButton();
        resetHeadShot = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        peopleCountLabel = new javax.swing.JLabel();
        attachCountLabel = new javax.swing.JLabel();
        imageCheckBox = new javax.swing.JCheckBox();
        showGuideBtn = new javax.swing.JButton();
        clearAllBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();

        guideContent.setColumns(20);
        guideContent.setRows(5);
        guideContent.setText("一、操作方法\n  1.選擇申請資料夾，如「CL01222016-0313-葉大雄 陳靜香(浙商15)」。\n　　（選擇完將自動帶入申請資料及附件，如未正確選擇，請手動修改。）\n  2.設定各申請人大頭照\n  3.按下確定\n  4.待完成之後關閉此工具\n  5.至入台申請平台-離線版查詢資料應可找到此筆申請資料\n\n二、注意事項：\n  1.在使用此工具之前，請先確定是否有先開啟入台證申請平台-離線版，\n    如有開啟，請將之關閉，才能夠使用。\n  2.在開啟此工具的情況下，無法使用入台證申請平台-離線版\n  3.以下資料無法從申請資料獲得，或可能無法辨識，因此必須手動填寫:\n    1) 旅行社 (預設為「浙江商務國際旅行社有限公司」)\n    2) 申請資格 (預設為「年滿20歲且有相當新臺幣20萬以上存款」)\n    3) 出生地\n    4) 職業類別\n    5) 居住城市\n    6) 大頭照\n  4.如果遇到無法解析檔案的情況，可以試著把Word檔轉成2007以上版本。");
        guideContent.setEnabled(false);
        jScrollPanel1.setViewportView(guideContent);

        javax.swing.GroupLayout guidePanelLayout = new javax.swing.GroupLayout(guidePanel);
        guidePanel.setLayout(guidePanelLayout);
        guidePanelLayout.setHorizontalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );
        guidePanelLayout.setVerticalGroup(
            guidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        errMsgContent.setColumns(20);
        errMsgContent.setLineWrap(true);
        errMsgContent.setRows(5);
        errMsgContent.setWrapStyleWord(true);
        jScrollPane1.setViewportView(errMsgContent);

        javax.swing.GroupLayout errMsgPanelLayout = new javax.swing.GroupLayout(errMsgPanel);
        errMsgPanel.setLayout(errMsgPanelLayout);
        errMsgPanelLayout.setHorizontalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        errMsgPanelLayout.setVerticalGroup(
            errMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errMsgPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CNHKMOTool-v1.2.3");
        setLocationByPlatform(true);
        setResizable(false);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setEnabled(false);

        submit.setFont(new java.awt.Font("新細明體", 0, 14)); // NOI18N
        submit.setText("確定");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel1.setText("申請資料");

        clientDataPath.setEnabled(false);

        selectClientDataBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectClientDataBtn.setText("瀏覽");
        selectClientDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectClientDataBtnActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("新細明體", 0, 14)); // NOI18N
        exit.setText("離開");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel4.setText("行程名稱");

        jLabel3.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        jLabel3.setText("資料夾");

        selectFolderBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectFolderBtn.setText("瀏覽");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });

        folderPath.setEditable(false);

        attachFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "附件", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("新細明體", 0, 13))); // NOI18N

        attachJList.setToolTipText("");
        attachJList.setCellRenderer(new AttachCellRenderer());
        jScrollPane3.setViewportView(attachJList);

        selectAttachBtn.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        selectAttachBtn.setText("新增");
        selectAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAttachBtnActionPerformed(evt);
            }
        });

        removeAttachBtn.setText("移除");
        removeAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttachBtnActionPerformed(evt);
            }
        });

        travellerModel = new DefaultListModel();
        travellerJList.setModel(travellerModel);
        travellerJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        travellerJList.setCellRenderer(new TravelCellRenderer());
        travellerJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                travellerJListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(travellerJList);

        removeAllAttachBtn.setText("全部移除");
        removeAllAttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllAttachBtnActionPerformed(evt);
            }
        });

        setToHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        setToHeadShot.setText("設為大頭照");
        setToHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToHeadShotActionPerformed(evt);
            }
        });

        resetHeadShot.setFont(new java.awt.Font("新細明體", 0, 13)); // NOI18N
        resetHeadShot.setText("重設大頭照");
        resetHeadShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHeadShotActionPerformed(evt);
            }
        });

        jLabel5.setText("人數：");

        jLabel6.setText("附件數：");

        peopleCountLabel.setText("0");

        attachCountLabel.setText("0");

        imageCheckBox.setText("顯示圖片");
        imageCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageCheckBoxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout attachFilePanelLayout = new javax.swing.GroupLayout(attachFilePanel);
        attachFilePanel.setLayout(attachFilePanelLayout);
        attachFilePanelLayout.setHorizontalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peopleCountLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(imageCheckBox))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeAllAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeAttachBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetHeadShot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setToHeadShot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectAttachBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        attachFilePanelLayout.setVerticalGroup(
            attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attachFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(attachFilePanelLayout.createSequentialGroup()
                        .addComponent(setToHeadShot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectAttachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(resetHeadShot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAttachBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAllAttachBtn))
                    .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imageCheckBox)
                    .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(attachCountLabel))
                        .addGroup(attachFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(peopleCountLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        showGuideBtn.setText("操作說明");
        showGuideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGuideBtnActionPerformed(evt);
            }
        });

        clearAllBtn.setText("全部清空");
        clearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        jLabel2.setText("狀態：");

        statusLabel.setFont(new java.awt.Font("新細明體", 1, 13)); // NOI18N
        statusLabel.setText("正常");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(selectFolderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(clientDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(selectClientDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(attachFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(showGuideBtn)
                        .addGap(18, 18, 18)
                        .addComponent(clearAllBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFolderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectClientDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tourName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(attachFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(statusLabel))
                .addGap(10, 10, 10)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showGuideBtn)
                    .addComponent(clearAllBtn))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        setAllDisable();
        statusLabel.setText("處理中...");
        worker = new SubmitWorker();
        worker.execute();
    }//GEN-LAST:event_submitActionPerformed

    private void selectClientDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectClientDataBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇申請資料");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        FileFilter ff = new ExtensionFileFilter("Microsoft Word file(2003以上版本)", new String[] { "DOC", "DOCX" });
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            clientData = fileChooser.getSelectedFile();
            clientDataPath.setText(clientData.getAbsolutePath());
            travelgroup = new TravelGroup();
            travellerList = new ArrayList<Traveller>();
            setAllDisable();
            statusLabel.setText("讀取中...");
            worker = new DataResolveWorker();
            worker.execute();
        }
    }//GEN-LAST:event_selectClientDataBtnActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        int q = JOptionPane.showConfirmDialog(null, "真的要關閉嗎?", "關閉確認", JOptionPane.YES_NO_OPTION);
        if(q == 0){ System.exit(0); }
    }//GEN-LAST:event_exitActionPerformed

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇資料夾");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        FileFilter ff = new ExtensionFileFilter("檔案資料夾", new String[] {});
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            initCustomComponents();
            setAllDisable();
            statusLabel.setText("讀取中...");
            worker = new FolderWorker(fileChooser.getSelectedFile());
            worker.execute();
        }
        
//        showAllData();
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void showGuideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGuideBtnActionPerformed
        JOptionPane.showMessageDialog(null, guidePanel, "操作說明", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_showGuideBtnActionPerformed

    private void clearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllBtnActionPerformed
        if(clientData == null && tourName.getText().equals("") && travellerModel.size() == 0){ return; }
        int q = JOptionPane.showConfirmDialog(null, "真的要全部清空嗎?", "清空確認", JOptionPane.YES_NO_OPTION);
        if(q == 0){ initCustomComponents(); }
    }//GEN-LAST:event_clearAllBtnActionPerformed

    private void resetHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetHeadShotActionPerformed
        if(attachListModel.size() <= 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();

        for(Attach a : la){
            a.setType("2");
        }

        setAttachJList();
    }//GEN-LAST:event_resetHeadShotActionPerformed

    private void setToHeadShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToHeadShotActionPerformed
        if(attachJList.getSelectedIndices().length == 0){
            showMessage("請選擇照片。", "warning");
            return;
        }else if(attachJList.getSelectedIndices().length > 1){
            showMessage("大頭照只能選擇一張。", "warning");
            return;
        }

        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();
        for(Attach a : la){
            a.setType("2");
        }

        Attach attach = (Attach)attachJList.getSelectedValue();
        attach.setType("1");

        setAttachJList();
    }//GEN-LAST:event_setToHeadShotActionPerformed

    private void removeAllAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllAttachBtnActionPerformed
        if(travellerJList.getSelectedIndex() < 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        tr.setAttachList(new ArrayList<Attach>());
        setAttachJList();
    }//GEN-LAST:event_removeAllAttachBtnActionPerformed

    private void travellerJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_travellerJListValueChanged
        if (!evt.getValueIsAdjusting()) {//This line prevents double events
            setAttachJList();
        }
    }//GEN-LAST:event_travellerJListValueChanged

    private void removeAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttachBtnActionPerformed
        if( attachJList.getSelectedIndices().length == 0){ return; }
        Traveller tr = (Traveller)travellerJList.getSelectedValue();
        List<Attach> la = tr.getAttachList();
        la.removeAll(attachJList.getSelectedValuesList());
        setAttachJList();
    }//GEN-LAST:event_removeAttachBtnActionPerformed

    private void selectAttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAttachBtnActionPerformed
        if(travellerJList.getSelectedIndex() < 0){ return; }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("請選擇附件");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter ff = new ExtensionFileFilter("圖片(jpg, jpeg, png)", new String[] { "JPG", "JPEG", "PNG" });
        fileChooser.setFileFilter(ff);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            Traveller tr = (Traveller)travellerJList.getSelectedValue();
            List<Attach> la = tr.getAttachList();
            for (File file : files) {
                Attach a = new Attach();
                a.setFile(file);
                la.add(a);
            }
            setAttachJList();
        }
    }//GEN-LAST:event_selectAttachBtnActionPerformed

    private void imageCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageCheckBoxMouseClicked
        setAttachJList();
    }//GEN-LAST:event_imageCheckBoxMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*  改變UI的style，Windows風格
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                */
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CNHKMOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CNHKMOGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attachCountLabel;
    private javax.swing.JPanel attachFilePanel;
    private javax.swing.JList attachJList;
    private DefaultListModel attachListModel;
    private javax.swing.JButton clearAllBtn;
    private javax.swing.JFormattedTextField clientDataPath;
    private File clientData;
    private javax.swing.JTextArea errMsgContent;
    private javax.swing.JPanel errMsgPanel;
    private javax.swing.JButton exit;
    private javax.swing.JTextField folderPath;
    private javax.swing.JTextArea guideContent;
    private javax.swing.JPanel guidePanel;
    private static javax.swing.JCheckBox imageCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel peopleCountLabel;
    private javax.swing.JButton removeAllAttachBtn;
    private javax.swing.JButton removeAttachBtn;
    private javax.swing.JButton resetHeadShot;
    private javax.swing.JButton selectAttachBtn;
    private javax.swing.JButton selectClientDataBtn;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JButton setToHeadShot;
    private javax.swing.JButton showGuideBtn;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton submit;
    private javax.swing.JTextField tourName;
    private javax.swing.JList travellerJList;
    private DefaultListModel travellerModel;
    // End of variables declaration//GEN-END:variables
    private static Connection conn;
    private SwingWorker worker;
    private TravelGroup travelgroup;
    private List<Traveller> travellerList;
    private List<ApplyAttach> applyAttachList;
    private static final int IMG_SIZE = 500;
    
    private void initCustomComponents() {
        tourName.setText("");
        folderPath.setText("");
        clientData = null;
        clientDataPath.setText("");
        travellerModel.removeAllElements();
        attachListModel = new DefaultListModel();
        attachJList.setModel(attachListModel);
        applyAttachList = new ArrayList<ApplyAttach>();
        travelgroup = new TravelGroup();
        travellerList = new ArrayList<Traveller>();
        peopleCountLabel.setText("0");
        attachCountLabel.setText("0");
        setAllDisable();
        selectFolderBtn.setEnabled(true);
        selectClientDataBtn.setEnabled(true);
        statusLabel.setText("正常");
    }
    
    private void createLink(String dbPath)  {
        try{
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
            this.conn = DriverManager.getConnection("jdbc:derby:"+dbPath);
            System.out.println("資料庫連結成功！");
            
            Statement st = conn.createStatement();
            try {
                st.execute("select * from TravelGroup");
            } catch(SQLException e) {
                System.out.println("Table不存在！");
                e.printStackTrace();
                showMessage("Table不存在！\n詳細:\n" + e.getMessage(), "err");
            }finally{
                st.close();
            }
        }catch(SQLException e){
            System.out.println("資料庫連結失敗！");
            e.printStackTrace();
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。\n詳細:\n" + e.getMessage(), "err");
        }catch(Exception e){
            System.out.println("資料庫連結失敗！");
            e.printStackTrace();
            showMessage("資料庫連結失敗！如有開啟入台證申請-離線版，請先關閉。\n詳細:\n" + e.getMessage() , "err");
        }
    }
    
    private void getFolderFile(File folder){
        getFolderFile(folder, true);
    }
    
    private void getFolderFile(File folder, boolean repeat){
        File[] fileList = folder.listFiles();
        List<Attach> la = new ArrayList<Attach>();
        Attach a = null;
        for(File f : fileList){
            String fn = f.getName().toLowerCase();
            if(fn.endsWith(".doc") || fn.endsWith(".docx")){
                clientData = f;
                clientDataPath.setText(f.getAbsolutePath());
            }else if(fn.endsWith(".jpg") || fn.endsWith(".jpeg") || fn.endsWith(".png")){
                try{
                    BufferedImage image = ImageIO.read(f);
                    if(image == null){ continue; }
                }catch(IOException ignore){}
                a = new Attach();
                a.setFile(f);
                la.add(a);
            }else if(f.isDirectory() && repeat){
                getFolderFile(f, false);
            }
        }
        if(la.size() > 0){
            ApplyAttach aa = new ApplyAttach();
            aa.setAttachList(la);
            aa.setBelongTo(folder.getName());
            applyAttachList.add(aa);
        }
    }
    
    private void setAttachPanel(){
        travellerModel.removeAllElements();
        for(Traveller traveller : travellerList){
            travellerModel.addElement(traveller);
        }
        
        if(travellerModel.size() > 0){
            travellerJList.setSelectedIndex(0);
            peopleCountLabel.setText(String.valueOf(travellerModel.size()));
        }
    }
    
    private void setAttachJList(){
        setAttachAreaDisable();
        worker = new AttachListWorker();
        worker.execute();
    }

    private void setAttachAreaDisable(){
        selectAttachBtn.setEnabled(false);
        setToHeadShot.setEnabled(false);
        resetHeadShot.setEnabled(false);
        removeAttachBtn.setEnabled(false);
        removeAllAttachBtn.setEnabled(false);
        travellerJList.setEnabled(false);
        attachJList.setEnabled(false);
    }
    
    private void setAttachAreaEnable(){
        selectAttachBtn.setEnabled(true);
        setToHeadShot.setEnabled(true);
        resetHeadShot.setEnabled(true);
        removeAttachBtn.setEnabled(true);
        removeAllAttachBtn.setEnabled(true);
        travellerJList.setEnabled(true);
        attachJList.setEnabled(true);
    }
    
    private void setAllDisable(){
        setAttachAreaDisable();
        tourName.setEnabled(false);
        selectFolderBtn.setEnabled(false);
        selectClientDataBtn.setEnabled(false);
        submit.setEnabled(false);
    }
    
    private void btnEnableChk(){
        selectFolderBtn.setEnabled(true);
        selectClientDataBtn.setEnabled(true);
        tourName.setEnabled(true);
        if(travellerModel.size() > 0){
            setAttachAreaEnable();
        }
        if(travellerList.size() > 0){
            submit.setEnabled(true);
        }
    }
    
    private String dateFormatFix(String d){
        d = d.trim();
        try{
            SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");;
            if(d.matches("^(19|20)\\d{2}(0[1-9]|1[0-2])(0[1-9]|1\\d|2\\d|3[0-1])$")){
                return d;
            }else if(d.matches("^(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d|3[0-1])$")){
                formatter = new SimpleDateFormat("yyyy-MM-dd");
            }else if(d.matches("^(19|20)\\d{2}\\s(0[1-9]|1[0-2])\\s(0[1-9]|1\\d|2\\d|3[0-1])$")){
                formatter = new SimpleDateFormat("yyyy MM dd");
            }else if(d.matches("^(19|20)\\d{2}/(0[1-9]|1[0-2])/(0[1-9]|1\\d|2\\d|3[0-1])$")){
                formatter = new SimpleDateFormat("yyyy/MM/dd");
            }else if(d.matches("^(19|20)\\d{2}\\.(0[1-9]|1[0-2])\\.(0[1-9]|1\\d|2\\d|3[0-1])$")){
                formatter = new SimpleDateFormat("yyyy.MM.dd");
            }else{
                return d;
            }
            Date tmpD = formatter.parse(d);
            formatter = new SimpleDateFormat("yyyyMMdd");
            return formatter.format(tmpD);
        }catch(Exception e){}
        return d;
    }
    
    private String calculateTourDate(String startDate, int num) throws ParseException{
        SimpleDateFormat formatter=new SimpleDateFormat("yyyyMMdd");
        Date sdt=formatter.parse(startDate);
        Calendar rightNow = Calendar.getInstance();
        rightNow.setTime(sdt);
        rightNow.add(Calendar.DAY_OF_YEAR,num);
        Date edt=rightNow.getTime();
        String endData = formatter.format(edt);
        return endData;
  }
    
    private String getNowTimeToSS(){
        Date d = new Date();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmssSS");
        String str=sdf.format(d);
        return str;
    }
    
    private String transToTC(String str){
        String result = null;
        try{
            result = new String(str.getBytes("UTF-8"), "UTF-8");
            JChineseConvertor convertor =  JChineseConvertor.getInstance();
            result = convertor.s2t(str);
        } catch (Exception e){e.printStackTrace();}
        return result;
    }
    
    private void word2003Resolve(File file){
        try{
            if(!file.getName().endsWith(".doc")) {
                throw new FileFormatException();
            } else {
                POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(file));
                HWPFDocument doc = new HWPFDocument(fs);
                Range range = doc.getRange();
                Table table = null;
                
                for (int i=0; i<range.numParagraphs(); i++) {
                    Paragraph par = range.getParagraph(i);
                    if(par.isInTable()){
                        table = range.getTable(par);
                        break;
                    }
                }
                if(table == null){ showMessage("無法解析檔案！", "warning"); return; }
                /*
                *   印出所有Table資料，確認用。
                *
                for (int rowIdx=0; rowIdx<table.numRows(); rowIdx++) {
                    TableRow row = table.getRow(rowIdx);
                    System.out.println("row "+rowIdx);
                    for (int colIdx=0; colIdx<row.numCells(); colIdx++) {
                        TableCell cell = row.getCell(colIdx);
                        System.out.println("column: "+colIdx+", text: "+cell.getParagraph(0).text());
                    }
                }
                */
                String sDate = dateFormatFix(table.getRow(0).getCell(2).getParagraph(0).text());
                String eDate = calculateTourDate(sDate, 14);
                travelgroup.setTourStartDate(sDate);
                travelgroup.setTourEndDate(eDate);
                travelgroup.setContactNameOfMainland(transToTC(table.getRow(4).getCell(1).getParagraph(0).text()));
                travelgroup.setContactTitleOfMainland(transToTC(table.getRow(4).getCell(3).getParagraph(0).text()));
                travelgroup.setContactMobileNoOfMainland(table.getRow(5).getCell(1).getParagraph(0).text());
                travelgroup.setContactGenderOfMainland(transToTC(table.getRow(5).getCell(3).getParagraph(0).text()));
                travelgroup.setContactTelNoOfMainland(table.getRow(5).getCell(5).getParagraph(0).text());
                travelgroup.setContactAddressOfMainland(transToTC(table.getRow(6).getCell(1).getParagraph(0).text()));

                try{
                    Traveller traveller = null;
                    for(int i = 0; true; i++){
                        traveller = new Traveller();
                        traveller.setSeqNo((short)i);
                        traveller.setChineseName(transToTC(table.getRow(11+7*i).getCell(1).getParagraph(0).text()));
                        traveller.setGender(transToTC(table.getRow(11+7*i).getCell(3).getParagraph(0).text()));
                        traveller.setBirthDate(dateFormatFix(table.getRow(11+7*i).getCell(5).getParagraph(0).text()));
                        traveller.setEnglishName(table.getRow(12+7*i).getCell(1).getParagraph(0).text());
                        traveller.setPassportNo(table.getRow(12+7*i).getCell(3).getParagraph(0).text());
                        traveller.setPassportExpiryDate(dateFormatFix(table.getRow(12+7*i).getCell(5).getParagraph(0).text()));
                        traveller.setPersonId(table.getRow(13+7*i).getCell(1).getParagraph(0).text());
                        traveller.setEducation(transToTC(table.getRow(14+7*i).getCell(1).getParagraph(0).text()));
                        traveller.setOccupationDesc(transToTC(table.getRow(14+7*i).getCell(3).getParagraph(0).text()));
                        traveller.setAddress(transToTC(table.getRow(15+7*i).getCell(3).getParagraph(0).text()));
                        traveller.setLivingCity(transToTC(table.getRow(15+7*i).getCell(3).getParagraph(0).text()));

                        if(!traveller.isValidTraveller()){ break; }
                        if(i == 0){
                            travellerList.add(traveller);
                            continue;
                        }
                        traveller.setRelative(travellerList.get(0).getChineseName());
                        traveller.setRelativeTitle(transToTC(table.getRow(16+7*i).getCell(1).getParagraph(0).text()));
                        traveller.setPartnerOfTaiwan(transToTC(table.getRow(16+7*i).getCell(3).getParagraph(0).text()));

                        travellerList.add(traveller);
                    }
                }catch(IndexOutOfBoundsException e){
//                    System.out.println("table資料已讀完，這個錯誤是正常的。");
//                    e.printStackTrace();
                }
            }
        } catch(FileFormatException e) {
            e.printStackTrace();
            showMessage("請選擇正確的檔案格式 - Microsotf Word。\n詳細:\n" + e.getMessage() , "err");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            showMessage("找不到檔案！\n詳細:\n" + e.getMessage() , "err");
        } catch (IOException e) {
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        } catch (ParseException e) {
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
    }
    
    private void word2007Resolve(File file){
        try{
            if(!file.getName().endsWith(".docx")) {
                throw new FileFormatException();
            } else {
                XWPFDocument doc = new XWPFDocument(new FileInputStream(file));
                List<XWPFTable> tableList = doc.getTables();
                
                if(tableList == null){ showMessage("無法解析檔案！", "warning"); return; }
                /*
                * 印出所有Table資料，確認用。
                *
                XWPFTable xwpfTable = tableList.get(0);
                List<XWPFTableRow> row = xwpfTable.getRows();
                int rowidx = 0, colidx = 0;
                for (XWPFTableRow xwpfTableRow : row) {
                    System.out.println("row " + rowidx);
                    rowidx++; colidx = 0;
                    List<XWPFTableCell> cell = xwpfTableRow.getTableCells();
                    for (XWPFTableCell xwpfTableCell : cell) {
                        if(xwpfTableCell!=null){
                            System.out.println("column " + colidx + ", text: " + xwpfTableCell.getText());
                            colidx++;
                        }
                    }
                }
                */
                XWPFTable table = tableList.get(0);
                String sDate = dateFormatFix(table.getRow(0).getCell(2).getText());
                String eDate = calculateTourDate(sDate, 14);
                travelgroup.setTourStartDate(sDate);
                travelgroup.setTourEndDate(eDate);
                travelgroup.setContactNameOfMainland(transToTC(table.getRow(4).getCell(1).getText()));
                travelgroup.setContactTitleOfMainland(transToTC(table.getRow(4).getCell(3).getText()));
                travelgroup.setContactMobileNoOfMainland(table.getRow(5).getCell(1).getText());
                travelgroup.setContactGenderOfMainland(transToTC(table.getRow(5).getCell(3).getText()));
                travelgroup.setContactTelNoOfMainland(table.getRow(5).getCell(5).getText());
                travelgroup.setContactAddressOfMainland(transToTC(table.getRow(6).getCell(1).getText()));

                try{
                    Traveller traveller = null;
                    for(int i = 0; true; i++){
                        traveller = new Traveller();
                        traveller.setSeqNo((short)i);
                        traveller.setChineseName(transToTC(table.getRow(11+7*i).getCell(1).getText()));
                        traveller.setGender(transToTC(table.getRow(11+7*i).getCell(3).getText()));
                        traveller.setBirthDate(dateFormatFix(table.getRow(11+7*i).getCell(5).getText()));
                        traveller.setEnglishName(table.getRow(12+7*i).getCell(1).getText());
                        traveller.setPassportNo(table.getRow(12+7*i).getCell(3).getText());
                        traveller.setPassportExpiryDate(dateFormatFix(table.getRow(12+7*i).getCell(5).getText()));
                        traveller.setPersonId(table.getRow(13+7*i).getCell(1).getText());
                        traveller.setEducation(transToTC(table.getRow(14+7*i).getCell(1).getText()));
                        traveller.setOccupationDesc(transToTC(table.getRow(14+7*i).getCell(3).getText()));
                        traveller.setAddress(transToTC(table.getRow(15+7*i).getCell(3).getText()));
                        traveller.setLivingCity(transToTC(table.getRow(15+7*i).getCell(3).getText()));

                        if(!traveller.isValidTraveller()){ break; }
                        if(i == 0){
                            travellerList.add(traveller);
                            continue;
                        }
                        traveller.setRelative(travellerList.get(0).getChineseName());
                        traveller.setRelativeTitle(transToTC(table.getRow(16+7*i).getCell(1).getText()));
                        traveller.setPartnerOfTaiwan(transToTC(table.getRow(16+7*i).getCell(3).getText()));

                        travellerList.add(traveller);
                    }
                }catch(IndexOutOfBoundsException e){
//                    System.out.println("table資料已讀完，這個錯誤是正常的。");
//                    e.printStackTrace();
                }
            }
        } catch(FileFormatException e) {
            e.printStackTrace();
            showMessage("請選擇正確的檔案格式 - Microsotf Word。\n詳細:\n" + e.getMessage() , "err");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            showMessage("找不到檔案！\n詳細:\n" + e.getMessage() , "err");
        } catch (IOException e) {
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        } catch (ParseException e) {
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
    }
    
    private void showMessage(String msg){
        showMessage(msg, "info");
    }
    
    private void showMessage(String msg, String type){
        if(type.equals("info")){
            JOptionPane.showMessageDialog(null, msg, "訊息", JOptionPane.INFORMATION_MESSAGE);
        }else if(type.equals("warning")){
            JOptionPane.showMessageDialog(null, msg, "注意", JOptionPane.WARNING_MESSAGE);
        }else if(type.equals("err")){
            errMsgContent.setText(msg);
            JOptionPane.showMessageDialog(null, errMsgPanel, "錯誤", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }
    
    private boolean insertData(){
        travelgroup.setApplyDate();
        travelgroup.setNiaApplyDate();
        travelgroup.setTourName(tourName.getText());
        travelgroup.setGroupCount((short)travellerList.size());
        travelgroup.setPermitApplyCount(Integer.toString(travellerList.size()));
        
        String idBase = getNowTimeToSS();
        String travelGroupId = idBase + "tg";
        String travellerId = idBase + "tr";
        String travelTourId = idBase + "tt";
        String travelTourDetailId = idBase + "ttd";

        try{
            Statement st = conn.createStatement();
            String insertStr;
            
            travelgroup.setId(travelGroupId);
            insertStr= travelgroup.getInsertStr();
//            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            int j = 1;
            for(Traveller traveller : travellerList){
                traveller.setId(travellerId + j);
                traveller.setTravelGroupId(travelGroupId);
                insertStr = traveller.getInsertStr();
//                System.out.println(insertStr);
                st.executeUpdate(insertStr);
                
                insertStr = "insert into APPLYCASEATTACH(id, TRAVELLERID, version, fileName, attachType, attachFile, CreateDate) "
                        + "values(?, ?, 0, ?, ?, ?, current_timestamp)";
//                System.out.println(insertStr);
                List<Attach> la = traveller.getAttachList();
                for(int i = 0; i < la.size(); i++){
//                    File file = imageProcess(la.get(i).getFile());
                    File file = la.get(i).getFile();
                    InputStream fin = new FileInputStream(file);
                    PreparedStatement ps = conn.prepareStatement(insertStr);
                    ps.setString(1, traveller.getId() + "at" + i);
                    ps.setString(2, traveller.getId());
                    ps.setString(3, file.getName());
                    ps.setString(4, la.get(i).getType());
                    ps.setBinaryStream(5, fin);
                    ps.execute();
                    fin.close();
                }
                j++;
            }
            
            insertStr = String.format(
                    "insert into TRAVELTOUR(id, travelGroupId, version, CreateDate, LastUpdateTime) "
                    + "values('%s', '%s', 0, current_timestamp, current_timestamp)",
                    travelTourId, travelGroupId);
//            System.out.println(insertStr);
            st.executeUpdate(insertStr);
            
            for(int i = 0; i < 15; i++){
                String tourDate = calculateTourDate(travelgroup.getTourStartDate(), i);
                String tourDescription = i+1 < 15? "台北" : "返程";
                insertStr = String.format(
                        "insert into TRAVELTOURDETAIL(id, travelTourId, version, tourDate, tourDescription, tourIndex) "
                        + "values('%s', '%s', 0, '%s', '%s', %d)",
                        travelTourDetailId + i, travelTourId, tourDate, tourDescription, i);
//                System.out.println(insertStr);
                st.executeUpdate(insertStr);
            }
        }catch(IOException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(SQLException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(ParseException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }catch(Exception e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
        return true;
    }

    /*
    * 圖片處理，目前不用了
    private File imageProcess(File file){
        try{
            if(file.length()/1024 >= IMG_SIZE || file.getName().toLowerCase().endsWith("png")){
                File theDir = new File(file.getParent() + "\\Modified");
                if (!theDir.exists()) {
                  try{
                      theDir.mkdir();
                   } catch(SecurityException e){
                       e.printStackTrace();
                       showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
                   }
                }
                BufferedImage image = ImageIO.read(file);
                String fileName = removeExtension(file.getName());
                String filePath = theDir + "\\" + fileName + ".jpg";
                File output = new File(filePath);
                ImageIO.write(image, "jpg", output);
                file = output;
                
                if(file.length()/1024 >= IMG_SIZE){ file = imageZoomOut(file); }
            }
        }catch(IOException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
        return file;
    }
    
    private File imageZoomOut(File file){
        try{
            BufferedImage bimage = ImageIO.read(file);
            int width = bimage.getWidth();
            int height = bimage.getHeight();
            int hw = width > height? width : height;
            if(hw > 2000){ hw = 2000; }
            hw -= 100;
            BufferedImage image = Scalr.resize(bimage, hw);
            ImageIO.write(image, "jpg", file);
            
            if(file.length()/1024 >= IMG_SIZE){ file = imageZoomOut(file); }
        }catch(IOException e){
            e.printStackTrace();
            showMessage("出現錯誤，請再試一次，或聯絡工程師來為你解決。\n詳細:\n" + e.getMessage() , "err");
        }
        return file;
    }
    */
    private String removeExtension(String name){
        int pos = name.lastIndexOf(".");
        if (pos > 0) {
            name = name.substring(0, pos);
        }
        return name;
    }
    
    private void showAllData(){
        System.out.println("申請日期：" + travelgroup.getApplyDate());
        System.out.println("申請日期(nia)：" + travelgroup.getNiaApplyDate());
        System.out.println("行程名稱：" + travelgroup.getTourName());
        System.out.println("旅客人數：" + travelgroup.getGroupCount());
        System.out.println("申請人數：" + travelgroup.getPermitApplyCount());
        System.out.println("入境地點：" + travelgroup.getEntryPort());
        System.out.println("出境地點：" + travelgroup.getExitPort());
        System.out.println("入境日期：" + travelgroup.getTourStartDate());
        System.out.println("出境日期：" + travelgroup.getTourEndDate());
        System.out.println("組團社代號：" + travelgroup.getCnTravelAgencyNo());
        System.out.println("組團社名稱：" + travelgroup.getCnTravelAgencyName());
        System.out.println("緊急聯絡人-姓名：" + travelgroup.getContactNameOfMainland());
        System.out.println("緊急聯絡人-關係：" + travelgroup.getContactTitleOfMainland());
        System.out.println("緊急聯絡人-手機：" + travelgroup.getContactMobileNoOfMainland());
        System.out.println("緊急聯絡人-性別：" + travelgroup.getContactGenderOfMainland());
        System.out.println("緊急聯絡人-電話：" + travelgroup.getContactTelNoOfMainland());
        System.out.println("緊急聯絡人-地址：" + travelgroup.getContactAddressOfMainland());
        for(Traveller traveller : travellerList){
            System.out.println("--------------------------------------");
            System.out.println("seqno：" + traveller.getSeqNo());
            System.out.println("中文姓名：" + traveller.getChineseName());
            System.out.println("性別:" + traveller.getGender());
            System.out.println("出生年月日：" + traveller.getBirthDate());
            System.out.println("拼音姓名：" + traveller.getEnglishName());
            System.out.println("通行證號碼：" + traveller.getPassportNo());
            System.out.println("通行證有效期至：" + traveller.getPassportExpiryDate());
            System.out.println("身份證號：" + traveller.getPersonId());
            System.out.println("教育程度：" + traveller.getEducation());
            System.out.println("現職：" + traveller.getOccupationDesc());
            System.out.println("居住城市：" + traveller.getLivingCity());
            System.out.println("住址：" + traveller.getAddress());
            System.out.println("為臺灣人民之配偶：" + traveller.getPartnerOfTaiwan());
            System.out.println("隨行親友姓名：" + traveller.getRelative());
            System.out.println("隨行親友稱謂：" + traveller.getRelativeTitle());
        }
        System.out.println("--------------------------------------\n附件:");
        for(ApplyAttach aa : applyAttachList){
            System.out.println("@: " + aa.getBelongTo());
            List<Attach> la = aa.getAttachList();
            for(Attach a : la){
                System.out.println(a.getFile().getName());
            }
        }
    }

    class ExtensionFileFilter extends FileFilter {
        String description;
        String extensions[];

        public ExtensionFileFilter(String description, String extension) {
            this(description, new String[] { extension });
        }

        public ExtensionFileFilter(String description, String extensions[]) {
            if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
            this.extensions = (String[]) extensions.clone();
            toLower(this.extensions);
        }

        private void toLower(String array[]) {
            for (int i = 0, n = array.length; i < n; i++) {
                array[i] = array[i].toLowerCase();
            }
        }

        public String getDescription() {
            return description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            } else {
                String path = file.getAbsolutePath().toLowerCase();
                for (int i = 0, n = extensions.length; i < n; i++) {
                    String extension = extensions[i];
                    if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    
    private static class AttachCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof Attach) {
                Attach attach = (Attach) value;
                if(attach.getType().equals("1")){
                    setText("[大頭照] " + attach.getFile().getName());
                }else{
                    setText(attach.getFile().getName());
                }
                
                if(imageCheckBox.isSelected()){
                    try{
                        BufferedImage image = ImageIO.read(attach.getFile());
                        if(image == null){
                            setIcon(FileSystemView.getFileSystemView().getSystemIcon(attach.getFile()));
                        }else{
                            ImageIcon ii = new ImageIcon(Scalr.resize(image, 50));
                            setIcon(ii);
                        }
                    }catch(IOException e){}
                }else{
                    setIcon(FileSystemView.getFileSystemView().getSystemIcon(attach.getFile()));
                }
                
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }
    
    private static class TravelCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(
                JList list, 
                Object value,
                int index, 
                boolean isSelected, 
                boolean cellHasFocus) {
            if (value instanceof Traveller) {
                Traveller traveller = (Traveller) value;
                String applyType = traveller.getSeqNo() == 0? "[主]" : "[隨]";
                setText(applyType + " " + traveller.getChineseName());
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }
    
    public class FolderWorker extends SwingWorker<Integer, Void> {

        private File folder;
        public FolderWorker(File f){
            this.folder = f;
        }
        
        @Override
        public Integer doInBackground() {
            getFolderFile(folder);
            if(clientData == null){
                return 1;
            }
            return 0;
        }

        @Override
        protected void done() {
            try {
                folderPath.setText(folder.getAbsolutePath());
                tourName.setText(folder.getName());
                int re = get();
                if(re == 0){
                    worker = new DataResolveWorker();
                    worker.execute();
                }else if(re == 1){
                    statusLabel.setText("請手動選擇申請文件。");
                    showMessage("找不到申請文件，請手動選擇。", "warning");
                }
                btnEnableChk();
            } catch (Exception ignore) {}
        }
    }
    
    public class DataResolveWorker extends SwingWorker<Integer, Void> {
        @Override
        public Integer doInBackground() {
            if(clientData.getName().endsWith(".doc")){
                word2003Resolve(clientData);
            }else if(clientData.getName().endsWith(".docx")){
                word2007Resolve(clientData);
            }else{ return 1; }
            
            if(travellerList.size() == 0){ return 2; }
            return 0;
        }

        @Override
        protected void done() {
            try {
                int re  = get();
                if(re == 0){
                    worker = new MappingWorker();
                    worker.execute();
                }else if(re == 1){
                    statusLabel.setText("請手動選擇申請文件。");
                    showMessage("請選擇正確的檔案格式 - Microsotf Word", "warning");
                    clientData = null;
                }else if(re == 2){
                    statusLabel.setText("無法解析旅客資料。");
                    showMessage("無法解析旅客資料。如果你使用的是Word2003版本，可以嘗試轉成2007以上版本。", "warning");
                }
                btnEnableChk();
            } catch (Exception ignore) {}
        }
    }
    
    public class MappingWorker extends SwingWorker<Integer, Void> {
        @Override
        public Integer doInBackground() {
            int re = 0;
            if(travellerList.size() == 0){ return 1; }
            if(applyAttachList.size() == 0){
                re = 2;   
            }else{
                for(Traveller traveller : travellerList){
                    for(ApplyAttach aa : applyAttachList){
                        if(aa.getBelongTo().indexOf(traveller.getChineseName()) >=0 ){
                            traveller.setAttachList(aa.getAttachList());
                        }
                    }
                    if(traveller.getAttachList().size() == 0){
                        re = 2;
                    }
                }
            }
            setAttachPanel();
            return re;
        }

        @Override
        protected void done() {
            try {
                int re =get();
                if(re == 0){
                    statusLabel.setText("讀取完成。");
                }else if(re == 2){
                    statusLabel.setText("找不到可以附加的圖片，請手動選擇。");
                    showMessage("找不到可以附加的圖片，請手動選擇。", "warning");
                }
                btnEnableChk();
            } catch (Exception ignore) {}
        }
    }
    
    public class AttachListWorker extends SwingWorker<Boolean, Void> {
        @Override
        public Boolean doInBackground() {
            if(travellerJList.getSelectedIndex() < 0){ return false; }
            attachListModel = new DefaultListModel();
            Traveller tr = (Traveller)travellerJList.getSelectedValue();
            List<Attach> la = tr.getAttachList();
            for(Attach a : la){
                attachListModel.addElement(a);
            }
            attachJList.setModel(attachListModel);
            return true;
        }

        @Override
        protected void done() {
            try {
                attachCountLabel.setText(String.valueOf(attachListModel.size()));
                if(get()){
                    setAttachAreaEnable();
                }
            } catch (Exception ignore) {}
        }
    }
    
    public class SubmitWorker extends SwingWorker<Boolean, Void> {
        @Override
        public Boolean doInBackground() {
            
            return insertData();
        }

        @Override
        protected void done() {
            try {
                if(get()){
                    initCustomComponents();
                    showMessage("儲存成功！");
                }
            } catch (Exception ignore) {}
        }
    }

    class ShutdownThread extends Thread {
        private Connection conn;
        ShutdownThread(Connection conn) {
            this.conn = conn;
        }
        public void run() {
            try {
                if(!conn.isClosed()){ this.conn.close(); }
            } catch (SQLException e) {}
        }
    }
}

